<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bevy | The Infornographer]]></title>
  <link href="http://clynamen.github.io/blog/categories/bevy/atom.xml" rel="self"/>
  <link href="http://clynamen.github.io/"/>
  <updated>2021-06-17T21:18:22+02:00</updated>
  <id>http://clynamen.github.io/</id>
  <author>
    <name><![CDATA[Vincenzo Giovanni Comito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Terrain Generation in Bevy Engine - Part 1: Rendering]]></title>
    <link href="http://clynamen.github.io/blog/2021/01/04/terrain_generation_bevy/"/>
    <updated>2021-01-04T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2021/01/04/terrain_generation_bevy</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>The use of rust language <a href="https://www.zdnet.com/article/rust-programming-language-were-using-it-for-bigger-projects-say-developers/">in major companies</a> is increasing  and with it also the game dev community is growing.</p>

<p><a href="https://arewegameyet.rs/">New libraries are published almost weekly</a> and, with enough patieance, it&rsquo;s already possible to build a high-quality game. The open-world RPG <a href="https://veloren.net/">Veloren</a> is a notable example.</p>

<p>Pushed by some recently published, impressive games such as <a href="https://www.youtube.com/watch?v=qPNiIeKMHyg">TLOU2</a> and <a href="https://www.youtube.com/watch?v=UnA7tepsc7s">Cyberpunk 2077</a> I decided to invest again part of my free time in gamedev experiments and to try out the new <a href="https://bevyengine.org/">Bevy</a> game engine.</p>

<p>Bevy is an ECS-based, 2D and 3D game engine currently under development, but it provides already many features for a simple game.</p>

<p><strong>In this post, we will build a simple terrain visualization</strong>, while also exploring some of Bevy&rsquo;s capabilities</p>

<h2>Generating a mesh from a heightmap</h2>

<p>Usually, terrain is described by a heightmap, usually a squared, grayscale image where each pixel encodes the height of the terrain at <strong>(x, z)</strong> coordinates</p>

<p>(<em>note: we will work in a Y-up world</em>).</p>

<p align="center">
  <img alt="img-name" src="https://upload.wikimedia.org/wikipedia/commons/4/4d/Parinacota--S019W070.png" width="300">
  <br>
    <em>Example Heightmap from Wikipedia</em>
</p>


<p><strong>Our application will load the image and turn the heightmap into a mesh. </strong></p>

<p>The simplest approach for doing this would be to partition a plane with a simple pattern of triangles, where the <strong>y</strong> component of each vector is sampled from the heightmap:</p>

<p align="center">
<img alt="img-name" src="http://clynamen.github.io/images/bevy_terrain0.png" width="200">
<br>
    <em>Simple triangle partition</em>
</p>


<p>For instance, by applying this approach on the simple heightmap on the left, we obtain the mesh on the right:</p>

<div class="row" style="display: flex">
  <div class="column" style="width: 50%; align-self: center">
    <p align="center">
        <img alt="img-name" src="http://clynamen.github.io/images/bevy_terrain2.png" width="200" style="border: #ccc 1px solid">
        <br>
        <em>Input Heightmap</em>
    </p>
  </div>
  <div class="column"  style="width: 50%">
    <p align="center">
        <img alt="img-name" src="http://clynamen.github.io/images/bevy_terrain1.png" width="300">
        <br>
        <em>Output Mesh</em>
    </p>
  </div>
</div>


<p>  <div class="column"></p>

<p>The above method is perfectly fine in most cases, but if we are going to generate and show multiple meshes (e.g. in an open-world game) the count of triangles is going to increase soon.</p>

<h2>Reducing the number of triangles - RTIN</h2>

<p>One simple option for reducing the number of triangles consists in <strong>approximating parts of the heightmap where the slope is low.</strong>
This way, planar parts in our mesh will be composed by a minor number of triangles:</p>

<p align="center">
<img alt="img-name" src="http://clynamen.github.io/images/bevy_terrain3.png" width="300">
<br>
    <em>An approximated version of the previous mesh</em>
</p>


<p><a href="https://www.cs.ubc.ca/~will/papers/rtin.pdf">RTIN</a> (Right-Triangulated Irregular Networks) is one possible algorithm for achieving this. It was nicely described in <a href="https://observablehq.com/@mourner/martin-real-time-rtin-terrain-mesh">this Observable article</a> by Vladimir Agafonkin from Mapbox. I have ported his javascript code <a href="https://github.com/clynamen/bevy_terrain/blob/main/src/terrain_rtin.rs">into rust</a>.</p>

<p>In a nutshell, the algorithm divides the space into two right-triangles recursively (like in a <a href="https://en.wikipedia.org/wiki/Binary_space_partitioning">BSP</a>). The obtained hierarchy allows choosing which triangle should be used for the mesh and which triangle should be ignored.
I advise reading the article if you want to know how it works.</p>

<p>The function</p>

<pre><code class="rust">pub fn rtin_build_terrain_from_heightmap(
    heightmap: &amp;HeightMapU16, error_threshold: f32) -&gt; TerrainMeshData
</code></pre>

<p>accepts the heightmap image data and the maximum allowed error as input. It follows the same process described in the article:</p>

<ol>
<li>computes the approximation error for each triangle</li>
<li>traverses the triangle hierarchy, collecting all the triangles that satisfy the error_threshold</li>
<li>computes and returns the vertices and indices of each selected triangle:</li>
</ol>


<pre><code class="rust">pub struct TerrainMeshData {
   pub vertices: Vec::&lt;Vec3&gt;,
   pub indices: Vec::&lt;u32&gt;
}
</code></pre>

<p>Given an image of side <strong>N</strong> (where N is a power of 2) the terrain will extend from (0, 0) to (N, N) with a height ranging from 0.0 to 1.0</p>

<h2>Build the Bevy mesh</h2>

<p>Let&rsquo;s go back to Bevy now. How can we visualize the triangles
that we obtained?</p>

<p><strong>It is very easy to create a new mesh</strong>: we choose the primitive topology (<em>i.e. do you want to draw points, triangles, or lines?</em>):</p>

<pre><code class="rust">let mut mesh = if enable_wireframe {
    Mesh::new(PrimitiveTopology::LineList)
} else {
    Mesh::new(PrimitiveTopology::TriangleList)
};
</code></pre>

<p>We then create the vectors that will contain the mesh vertex attributes and indices:</p>

<pre><code class="rust">let mut vertices : Vec::&lt;[f32; 3]&gt; = Vec::new();
let mut indices : Vec::&lt;u32&gt; = Vec::new();
let mut colors  : Vec::&lt;[f32; 3]&gt; = Vec::new();
</code></pre>

<p>and we fill them starting from the <code>TerrainMeshData</code> obtained above.</p>

<p><strong>Vertices positition and color:</strong></p>

<pre><code class="rust">for vertex in &amp;terrain_mesh_data.vertices {
    vertices.push([vertex.x, vertex.y, vertex.z]);

    let color = grad.get(vertex.y);
    let raw_float : Srgb::&lt;f32&gt; = 
        Srgb::&lt;f32&gt;::from_linear(color.into());
    colors.push(
        [raw_float.red, raw_float.green, raw_float.blue]);
}
</code></pre>

<p>The vertices will have a color proportional to the terrain height. The <a href="https://docs.rs/palette/0.5.0/palette/">palette</a> library is used for generating the color gradient.</p>

<p><strong>Indices:</strong></p>

<p>It is useful to show the terrain wireframe for debugging. So we will use different indices depending on whether we want to draw triangles or lines.</p>

<pre><code class="rust">if enable_wireframe {
    for i in 0..triangle_number {
        // three line for each triangle, 
        // we specify start index and end index of each line
        // (we are ignoring the duplicated lines ofc)
        for j in &amp;[0, 1, 1, 2, 2, 0] {
            indices.push(terrain_mesh_data.indices[i*3+j]);
        }
    }
} else {
    for i in 0..triangle_number {
        // three vertex for each triangle
        for j in 0..3 {
            indices.push(terrain_mesh_data.indices[i*3+j]);
        }
    }
}
</code></pre>

<p>We can now add these vectors to the mesh:</p>

<pre><code class="rust">mesh.set_attribute(
    Mesh::ATTRIBUTE_POSITION,
    VertexAttributeValues::Float3(vertices));
mesh.set_attribute(
    TerrainMaterial::ATTRIBUTE_COLOR, 
    VertexAttributeValues::Float3(colors)
);
mesh.set_indices(Some(Indices::U32(indices)));
</code></pre>

<p>the <code>set_attribute</code> function accepts an arbitrary string as the first argument. This string will later be referenced in the shader.</p>

<p>Rust type system and Bevy perform all the type conversion for us, so we avoid mangling with byte arrays and pointer casts.</p>

<p><strong>Our mesh is now ready</strong>.</p>

<h2>Mesh material</h2>

<p>Bevy <a href="https://docs.rs/bevy_pbr/0.4.0/bevy_pbr/prelude/struct.StandardMaterial.html">standard material</a> allows to use a texture, but it does not support vertex colors. In order to draw the terrain with color proportional to the height, our shader has to use the <code>TerrainMaterial::ATTRIBUTE_COLOR</code> mesh attribute.</p>

<p>In order to do this, we will use the simple render pipeline and shaders from the <a href="https://github.com/bevyengine/bevy/blob/master/examples/shader/mesh_custom_attribute.rs">mesh_custom_attribute.rs</a> example.</p>

<p>The <code>add_terrain_pipeline</code> function, called during setup, creates and returns a new pipeline:</p>

<pre><code class="rust">#[derive(RenderResources, Default, TypeUuid)]
#[uuid = "0320b9b8-b3a3-4baa-8bfa-c94008177b17"]
pub struct TerrainMaterial {
}

impl TerrainMaterial {
    pub const ATTRIBUTE_COLOR: &amp;'static str = "Vertex_Color";
}


pub fn add_terrain_pipeline(
    mut pipelines: ResMut&lt;Assets&lt;PipelineDescriptor&gt;&gt;,
    mut shaders: ResMut&lt;Assets&lt;Shader&gt;&gt;,
    mut render_graph: ResMut&lt;RenderGraph&gt;
) -&gt; Handle&lt;PipelineDescriptor&gt; {

    // Create a new shader pipeline
    let pipeline_handle = pipelines.add(PipelineDescriptor::default_config(ShaderStages {
        vertex: shaders.add(Shader::from_glsl(ShaderStage::Vertex, VERTEX_SHADER)),
        fragment: Some(shaders.add(Shader::from_glsl(ShaderStage::Fragment, FRAGMENT_SHADER))),
    }));

    // Add an AssetRenderResourcesNode to our Render Graph. This will bind TerrainMaterial resources to our shader
    render_graph.add_system_node(
        "terrain_material_node",
        AssetRenderResourcesNode::&lt;TerrainMaterial&gt;::new(true),
    );

    // Add a Render Graph edge connecting our new "terrain_material_node" node to the main pass node. This ensures "terrain_material_node" runs before the main pass
    render_graph
        .add_node_edge(
            "terrain_material_node",
            base::node::MAIN_PASS,
        )
        .unwrap();

    pipeline_handle
}
</code></pre>

<h2>Make the mesh available for use</h2>

<p><em>Note: concepts such as Assets, Handle and Resources are described in the <a href="https://bevyengine.org/news/introducing-bevy/">Bevy Introduction</a></em></p>

<p>We will not add the mesh directly to an Entity. Instead, the mesh will be owned by the <code>Assets</code> asset manager.
Once we move the mesh to the manager, we obtain a <code>Handle</code> in exchange:</p>

<pre><code class="rust">let terrain_shaded_mesh_handle : Handle&lt;Mesh&gt; = meshes.add(terrain_shaded_mesh);
</code></pre>

<p>This <code>Handle</code> is now a clonable reference to the mesh. It is quite useful because, for instance, we can add it to a Bevy <code>Resource</code>:</p>

<pre><code class="rust">#[derive(Default)]
pub struct TerrainMeshResource {
    pub shaded: Handle&lt;Mesh&gt;,
    pub wireframe: Handle&lt;Mesh&gt;,
}
</code></pre>

<p>So that we can reference later the mesh in any system. For instance, the following system allows us to switch between the shaded and wireframe mesh:</p>

<pre><code class="rust">pub fn switch_mesh_system(
    keyboard_input: Res&lt;Input&lt;KeyCode&gt;&gt;,
    // query for selecting the entity with the terrain mesh
    mut terrain_query: Query&lt;(Entity, &amp;mut Handle&lt;Mesh&gt;, &amp;Terrain)&gt;,
    // resource for accessing the shaded and wireframe mesh handles
    terrain_mesh_res: Res&lt;TerrainMeshResource&gt;,
    commands: &amp;mut Commands,
) {

    let new_mesh_handle = 
        if keyboard_input.just_pressed(KeyCode::N) {
            Some(terrain_mesh_res.shaded.clone())
        } else if keyboard_input.just_pressed(KeyCode::M) {
            Some(terrain_mesh_res.wireframe.clone())
        } else {
            Option::None
        };

    if(new_mesh_handle.is_some()) {
        let handle = new_mesh_handle.unwrap();
        for (entity, mut mesh, _terrain) in terrain_query.iter_mut() {
            commands.remove_one::&lt;Handle&lt;Mesh&gt;&gt;(entity);
            commands.set_current_entity(entity);
            commands.with(handle.clone());
        }
    }
}
</code></pre>

<h2>Add the mesh to the scene</h2>

<p>Finally, let&rsquo;s spawn an entity in the scene with the terrain mesh:</p>

<pre><code class="rust">commands
    .spawn(MeshBundle {
        mesh: terrain_mesh_res.shaded.clone(),
        render_pipelines: RenderPipelines::from_pipelines(
            vec![RenderPipeline::new(pipeline_handle,)]),
        transform: Transform::from_translation(
            Vec3::new(0.0, 0.0, 0.0)),
        ..Default::default()
    })
    .with(Terrain{})
</code></pre>

<p>The terrain mesh will now be visible in the scene:</p>

<div class="row" style="display: flex">
  <div class="column" style="width: 50%; align-self: center">
    <p align="center">
        <img alt="img-name" src="http://clynamen.github.io/images/bevy_terrain4.png" width="300">
    </p>
  </div>
  <div class="column"  style="width: 50%">
    <p align="center">
        <img alt="img-name" src="http://clynamen.github.io/images/bevy_terrain5.png" width="300">
    </p>
  </div>
</div>


<p></p>

<p>Note that, beyond spawning the <code>MeshBundle</code>, we added a <code>Terrain</code> component. This empty struct actually does nothing at all! However, by adding it to our entity, it works as a tag for referencing this entity in a query. Check the previous definition of <code>switch_mesh_system</code></p>

<pre><code class="rust">pub fn switch_mesh_system(
    //...
    mut terrain_query: Query&lt;(Entity, &amp;mut Handle&lt;Mesh&gt;, &amp;Terrain)&gt;,
    // ...
) {
    // ...
}
</code></pre>

<p>The <code>terrain_query</code> will only look for entities that contain <strong>both a mesh and a terrain component</strong>.</p>

<h1>Conclusion</h1>

<p>After a few days spent playing with this really promising framework I can totally say that using Bevy it&rsquo;s a nice experience:</p>

<ul>
<li>There are enough examples for learning how to use its features</li>
<li>The ECS system seems very powerful and composable. So far I was always under the impression that I could read and write every part of the application in a clean way, without incurring in borrow checker issues. I don&rsquo;t know if this will hold true in larger applications, but I am optimistic about it</li>
<li>Many features are missing right now (e.g. there are just a couple of UI widgets) but the development is pretty active.</li>
</ul>


<p>In the next post, we will add support for generating random terrain. Until then, you can check the <a href="https://github.com/clynamen/bevy_terrain/tree/0.0.1">current source code here</a></p>
]]></content>
  </entry>
  
</feed>
