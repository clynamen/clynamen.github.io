<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: prototype | The Infornographer]]></title>
  <link href="http://clynamen.github.io/blog/categories/prototype/atom.xml" rel="self"/>
  <link href="http://clynamen.github.io/"/>
  <updated>2019-06-02T07:24:57+02:00</updated>
  <id>http://clynamen.github.io/</id>
  <author>
    <name><![CDATA[Vincenzo Giovanni Comito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Experimente mit Rust - Carsim2d [DE]]]></title>
    <link href="http://clynamen.github.io/blog/2019/02/04/carsim2d/"/>
    <updated>2019-02-04T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2019/02/04/carsim2d</id>
    <content type="html"><![CDATA[<p>Es sind Jahre, Ich wollte etwas mit Rust machen.
Als moderner C++ Programmierer zu sein mag ich natürlich Rust:
Die Programmiersprache hat die Funktione, die mir am besten gefallen:</p>

<ul>
<li>Kompilierzeitprüfungen</li>
<li>Guter package manager</li>
<li>Kein garbage-collector, aber ein borrow-checker</li>
</ul>


<p>Ich hatte die Idee, ein Videospiele zu machen. Aber Ich weiß, Ich brauche mehr Zeit.
Rust is nicht so gut als C++ für Videospiele: es ist möglich, Opengl oder Vulkan zu verwenden.
Aber es gibt keine or klein library dafür. Zum Beispiel, <a href="https://www.piston.rs/">piston</a> ist eine 2D Game library mit wenige, langsame Funktionen.
<a href="https://www.amethyst.rs/">Amethyst</a> ist vielversprechender. Diese library ist insipiriert aus data-driven Prinzipen und
es ist auf eine <a href="https://github.com/slide-rs/specs">Entity Component System</a> aufgebaut. Amethyst ist jedoch noch unreif.  Die Entwicker versuchen, die Grafik-Engine schenller zu machen.
Außerdem würde Ich gerne Opengl vergessen und geh direkt mit Vulkan, aber seine Gemeinschaft ist kleine.</p>

<p>Anstatt ein Videospiele zu machen, suchte Ich nach einer anderen Chance.
Ich brauchte ein einfach Fahrzeug-Simulator auf Arbeit mit ROS-Unterstützung. Keine komplexen Grafiken,
vielleicht etwas Physik. Die gegenwärtig verfügbar libraries für Rust sollten passen.</p>

<h3>Roadsim2D</h3>

<p>Roadsim2D ist nur a toy-project. Ich wollte ein Simulator wo man kannt 2D Autos Steuren</p>

<p>Ich schreibe roadsim2D als mein erstes rust Projekt. Ich lerne immer noch, wie die borrow-checker funktioniert.
Ich muss sagen: am Anfang, man verschwendet Zeit auch im die einfachesten Dinge. Der compiler hilft dir mit Fehlerbeschreibung, doch die richtige Lösung ist oft spezifisch.
Schließlich du musst lernen wie den Programm besser entwürfen. Du lernst wenn du spielst gegen den compiler.
Ich habe piston benutzt, um basisch Form zeichen. Die Library steuert geometrisch Transform, so ist es leicht eine Kamera hinzufügen. Ich wollte das nicht kodieren.</p>

<p>Nach dem die Kamera, die Autos wurden hinzugefügt. Ihre Bewegungen folgen die <a href="https://en.wikipedia.org/wiki/Ackermann_steering_geometry">Ackermann</a> Lenkmodell.
Ich hatte bald Probleme mit die Borrow-checker: zu viele Variables werden benutzen von zu viele Komponente.
Es wurde klar, ich musste den Code umgestalten.</p>

<p>Beim Lesen über Amethyst, Ich habe <a href="https://github.com/slide-rs/specs">specs</a> entdeckt. specs ist eine library fur data-oriented programming, ein Paradigma in Game Development sehr bekannt.
In diese library, der Programmierer musst Komponenten und Systemen definieren. Komponenten haben
data, Systeme haben Code, die die Komponenten verändern.
Nicht nur das macht das Programm (potenziell) schneller, das macht alles einfacher als voher zu codieren. Mit specs, es ist explizit, was ist konstant und was kannt änderen. Und du kannst das Leben von Komponenten mit die Entitäten steuern.</p>

<p>Zum Beispiel, schauen wir mal, wie die Physik von Autos ist aktualisiert:</p>

<pre><code class="rust">
impl&lt;'a, 'b&gt; System&lt;'a&gt; for UpdateCarsSys&lt;'b&gt; {
    type SystemData = (ReadExpect&lt;'a, UpdateDeltaTime&gt;, WriteStorage&lt;'a, PhysicsComponent&gt;, ReadStorage&lt;'a, Car&gt;);

    fn run(&amp;mut self, (update_delta_time, mut physics_components, mut cars): Self::SystemData) {
        for (physics_component, car) in (&amp;mut physics_components, &amp; cars).join() {

            let mut rigid_body = self.physics_world.rigid_body_mut(physics_component.body_handle).expect("car rigid body not found");
            let pos = rigid_body.position().translation.vector;
            let rot = rigid_body.position().rotation;
            let vel = rigid_body.velocity();

            let rot : Basis2&lt;_&gt; = Rotation2::&lt;f64&gt;::from_angle(Rad(rot.unwrap().re));
            let yaw_increment = vel.linear.x as f32 / (car.bb_size.height as f32 / 2.0f32)  *  car.wheel_yaw;


            rigid_body.set_angular_velocity(yaw_increment as f64);
        }
    }

}
</code></pre>

<p>UpdateCarsSys ist eine Klasse, die die Winkelgeschwindigkeit nach die Ackermann Lenkmodell  verändern. Die Klasses tut nur das. Die run() Methode wird bei jedem Frame laufen.
In ein System, man kannt eine Query ǘber die Komponenten tun. Dann, kannst du die Ergebnisliste iteriren. Die Komponenten, die du kannst ändern, können mit <strong>mut</strong> markiert werden.</p>

<h2>Links</h2>

<p><a href="https://github.com/clynamen/roadsim2d">roadsim2d</a></p>
]]></content>
  </entry>
  
</feed>
