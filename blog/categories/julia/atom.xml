<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: julia | The Infornographer]]></title>
  <link href="http://clynamen.github.io/blog/categories/julia/atom.xml" rel="self"/>
  <link href="http://clynamen.github.io/"/>
  <updated>2020-04-23T22:58:05+02:00</updated>
  <id>http://clynamen.github.io/</id>
  <author>
    <name><![CDATA[Vincenzo Giovanni Comito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programmatically create function in Julia with metaprogramming]]></title>
    <link href="http://clynamen.github.io/blog/2019/06/16/julia_def_fun_macro/"/>
    <updated>2019-06-16T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2019/06/16/julia_def_fun_macro</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2019/05/31/julia_opencv/">last post</a>, I was evaluating various solutions for generating the <strong>Julia-OpenCV</strong> bindings I dream of.</p>

<p>I am currently studying how the <a href="https://github.com/JuliaInterop/libcxxwrap-julia/">libcxxwrap</a> library works, in order to check if it fits my requirements. I quickly noticed that it misses the capability of generating function with keywords (see the <a href="https://github.com/JuliaInterop/libcxxwrap-julia/issues/27">Github issue</a>). This feature would be really interesting for the binding since OpenCV uses a lot of default and keyword arguments, both of which are nicely supported in python.</p>

<p>But no worries, <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/index.html">Julia is a Lisp</a> (or, at least, looks very much like it for many reasons). It should be easy to manipulate function code in order to add defaults, keyword, etc&hellip;</p>

<p>Let&rsquo;s find out how.</p>

<h2>Basics</h2>

<p>The fundamentals of Julia metaprogramming are explained in <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/index.html">the official documentation</a>. You should read that before going further. However, we will start with the easy stuff.</p>

<p>First, let&rsquo;s write a macro that creates a function.</p>

<pre><code class="julia">macro make_fn1(name)
  name_str = "$name"
  quote
      function $(esc(name))()
          println("Hello ", $name_str, "!")
      end
  end
end

@make_fn1(world)
# Hello World!
</code></pre>

<p>What happens when macro <strong>make_fn1</strong> is called? We first take value of the macro argument <strong>name</strong> and convert it into a string, which will be used later for printing. Then, we return an expression that defines a function. The name of the function comes from the same macro argument.
When the macro is called, the returned expression is evaluated and thus the function &lsquo;world&rsquo; is defined.</p>

<p>We can inspect the expression returned by <strong>make_fn1</strong> by using the @macroexpand macro:</p>

<pre><code class="julia">julia&gt; @macroexpand @make_fn1(pizza)
quote
    function pizza()
        (Main.println)("Hello ", "pizza", "!")
    end
end
</code></pre>

<p>Note how in the function declaration we used <code>$(esc(name))</code> instead of just using <code>$(name)</code>. Otherwise, Julia <strong>hygiene rules</strong> will cause the function to have a random name:</p>

<pre><code class="julia">macro make_fn1_bad(name)
  name_str = "$name"
  quote
      function $(name)()
          println("Hello ", $name_str, "!")
      end
  end
end

julia&gt; @macroexpand @make_fn1_bad(pizza)
quote
    function #18#pizza() # &lt;- random name was generated
        (Main.println)("Hello ", "pizza", "!")
    end
end
</code></pre>

<h2>Adding arguments</h2>

<p>Ok, we can now generate function with arbitrary names, but we still miss arguments. A possible solution for this was discussed in this <a href="https://discourse.julialang.org/t/defining-function-inside-a-macro/9139">discourse thread</a>.</p>

<p>This is the proposed solution:</p>

<pre><code class="julia">macro make_fn2(name, args...)
   name_str = "$name"
   argstup = Tuple(args)

   quote
       function $(esc(name))($(map(esc, argstup)...))
           println($name_str)
           map(println, [($(map(esc, argstup)...))])
       end
   end
end

@make_fn2(example_fun, a, b, c)

julia&gt; example_fun(1.2, "dog", 3)
1.2
dog
3
julia&gt; @macroexpand @make_fn2(example_fun, a, b, c)
quote
    #= /home/clynamen/software/tests/julia/main.jl:50 =#
    function sum_all(a, b, c)
        #= /home/clynamen/software/tests/julia/main.jl:51 =#
        (Main.println)("sum_all")
        #= /home/clynamen/software/tests/julia/main.jl:52 =#
        (Main.map)(Main.println, [a, b, c])
    end
end
</code></pre>

<h2>A more complex example</h2>

<p>ok, how to add default arguments now?</p>

<p>I have tried to extend the previous solution and failed.
I thought it was possible to use this substitution syntax again but I still didn&rsquo;t
figure out how the parser works with the macro output.</p>

<p><strong>However, there is a better way to do this</strong>: We can easily manipulate
the <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> programmatically,
by composing list of keywords and arguments. Even better, Julia allows you to
inspect the AST via the <code>@dump</code> macro:</p>

<pre><code class="julia">julia&gt; Meta.@dump( function(a, b, c="hello") end)
Expr
  head: Symbol function
  args: Array{Any}((2,))
    1: Expr
      head: Symbol tuple
      args: Array{Any}((3,))
        1: Symbol a
        2: Symbol b
        3: Expr
          head: Symbol =
          args: Array{Any}((2,))
            1: Symbol c
            2: String "hello"
    2: Expr
      head: Symbol block
      args: Array{Any}((1,))
        1: LineNumberNode
          line: Int64 1
          file: Symbol none
</code></pre>

<p>This is pretty handy: you can write an example of the expression you would like to build,
inspect its AST and use it as a reference.</p>

<p>Note how the function arguments are just a list of <code>Symbol</code>s and <code>Expr</code>essions.</p>

<p><strong>Finally</strong>, here an example of a macro that defines a function with default and keyword arguments:</p>

<pre><code class="julia">macro makefn(name, args, kwargs)
   # Let's start defining the name and
   # arguments declaration
   call = Expr(:call)
   push!(call.args, Symbol(name))

   # keyword arguments of the new function
   kwargs_list = []

   # In julia, the keyword arguments are added at
   # the begin of the list, even if they appear
   # last in the syntax. So, process kwargs first:
   for arg in kwargs.args
      if typeof(arg) == Symbol
         # plain keyword arg
         push!(kwargs_list, esc(arg))
      elseif typeof(arg) == Expr
         # default keyword arg
         kw = Expr(:kw)
         push!(kw.args, esc(arg.args[1]))
         push!(kw.args, arg.args[2])

         push!(kwargs_list, kw)
      end
   end

   # Keyword arguments are defined in a
   # :parameters Expr
   parameters = Expr(:parameters)
   parameters.args = kwargs_list

   # add the keyword arguments at the begin of
   # the argument list
   push!(call.args, parameters)

   # now process plain arguments
   for arg in args.args
      if typeof(arg) == Symbol
         # normal arg
         push!(call.args, esc(arg))
      elseif typeof(arg) == Expr
         # default arg
         kw = Expr(:kw)
         push!(kw.args, esc(arg.args[1]))
         push!(kw.args, arg.args[2])
         push!(call.args, kw)
      end
   end

   # a function Expr has two arguments:
   # the declaration and the :block that defines the
   # function implementation.
   # For this example, we define an empty :block
   fn_args = [call, Expr(:block)]
   fn = Expr(:function)

   append!(fn.args, fn_args)
   fn
end

# example usage
@makefn("more_complex_fun", (a, b, c="hello"), (f=1, g="world"))
</code></pre>

<p>Check out the function generated by the macro:</p>

<pre><code>julia&gt; @macroexpand1 @makefn("more_complex_fun", (a, b, c="hello"), (f=1, g="world"))
:(function (Main.more_complex_fun)(a, b, c="hello"; f=1, g="world")
  end)
</code></pre>

<h2>Conclusions</h2>

<p>I think the AST manipulation offers what I need for extending <strong>libcxxwrap</strong>. Probably it will
also be useful during the actual binding generation, allowing to automatically write Julia code that better integrates with the OpenCV interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Julia and the current status of OpenCV bindings]]></title>
    <link href="http://clynamen.github.io/blog/2019/05/31/julia_opencv/"/>
    <updated>2019-05-31T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2019/05/31/julia_opencv</id>
    <content type="html"><![CDATA[<p><strong>Recently the Julia <a href="https://github.com/JuliaInterop/Cxx.jl">Cxx.jl package</a> came back to life again.</strong> The package uses Clang for calling C++ at runtime, possibly making it the most interesting tool for interfacing with a lot of C++ libraries.
Since Julia seems really promising for writing Computer Vision algorithms, both for support for Machine Learning and linear algebra in general with high performance, I wanted to try the OpenCV bindings.
The idea seemed appealing to quite some people since there are three attempts in this application, that not surprisingly share the same name:</p>

<ul>
<li><a href="https://github.com/JuliaOpenCV/OpenCV.jl">OpenCV.jl</a></li>
<li><a href="https://github.com/maxruby/OpenCV.jl">OpenCV.jl</a></li>
<li>..and&hellip; <a href="https://github.com/TakekazuKATO/OpenCV.jl">OpenCV.jl</a></li>
</ul>


<p>A bit sadly, all three projects seem abandoned now. I am not surprised since both Julia and OpenCV were undergoing many changes in the latest years. Even if bindings are a thin layer of intermixed language code, it is quite a burden to maintain them, especially during the initial phase where no one has a real interest in them.</p>

<p><strong>The OpenCV project itself provides two main bindings, for python and java.</strong> I have never used the java binding, but I can assure you the python binding is damn good. Since all the hard work is done by the OpenCV library itself and, elsewhere, by numpy, it is possible to quickly use the complex algorithm offered by OpenCV with C++ performance. These bindings are two extra modules built along with the full source, so they are provided in almost all distributions.
Most importantly, being included in the same repo, these bindings are maintained by the same OpenCV developers.</p>

<p>The generation of bindings for other languages, however, is left as an exercise to the reader.</p>

<p>As explained in the <a href="https://docs.opencv.org/3.4/da/d49/tutorial_py_bindings_basics.html">official documentation</a> the generation of java and python binding is a quick and dirty process: A python script parses the headers and provides function signatures to a generator, which in turn generates the python (or java) code using template strings and some handcoded files. The process does not seem really modular, and probably today there are better options, especially for the parser (e.g. libclang). But being self-contained and targeted for opencv only, <strong>it just works</strong>.</p>

<p>As for Julia, lovers of other languages created their own bindings. Just to name a few:</p>

<ul>
<li><a href="https://github.com/twistedfall/opencv-rust">opencv-rust</a></li>
<li><a href="https://github.com/peterbraden/node-opencv">node-opencv</a></li>
<li><a href="http://hackage.haskell.org/package/opencv">haskell - opencv</a></li>
</ul>


<p>Needless to say, these libraries use different implementation approaches:</p>

<ul>
<li>Writing a C library first, and then use the <a href="https://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a> for C</li>
<li>Wrap the C++ code in a library that can be imported in the desired language.</li>
<li>Perform a C++ low-level call</li>
</ul>


<p>Now, all the three Julia implementation cited above seems to have taken the &lsquo;Call C++ code directly&rsquo; approach using the Cxx.jl library. After all, clang is powerful enough to do this kind of magic today. It is kind of amazing that compiled and JIT code can talk each other, almost if as if we are using languages built upon a high-level runtime (e.g. C# and VisualBasic on CLR, Java and Scala on the JVM etc&hellip;).</p>

<p>So, coming back to the original problem, I would like to improve or write an OpenCV binding for Julia. Still, <strong>I am not sure which is the best approach.</strong>
Using the Cxx.jl library, even if quite elegant and easy to read (since all the ugly stuff stays in the Cxx.jl module itself) involves writing most of the code manually. Whenever functions are added/removed/modified in OpenCV, we need to manually update our bindings.
Of course, this happens often, but not so often to be an unmanageable burden (it is the interest of the same OpenCV developers to change the API slowly, without breaking changes).</p>

<p><strong>However the parser approach used by OpenCV makes more sense</strong>: Code is generated automatically, except for a few special cases for convenience or performance reason. Only small updates should be required, new functions will be automatically supported, and maybe one day the binding can be merged in the same OpenCV library.</p>

<p>It is hard to chose one of the two paths without prototyping a bit with them. I am currently evaluating the generator approach. I will write about the progress in a new post, hopefully soon.</p>
]]></content>
  </entry>
  
</feed>
