<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Infornographer]]></title>
  <link href="http://clynamen.github.io/atom.xml" rel="self"/>
  <link href="http://clynamen.github.io/"/>
  <updated>2020-05-02T11:29:48+02:00</updated>
  <id>http://clynamen.github.io/</id>
  <author>
    <name><![CDATA[Vincenzo Giovanni Comito]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Buy a car with data - Part 1]]></title>
    <link href="http://clynamen.github.io/blog/2020/05/02/buy_a_car_with_data-pt1/"/>
    
    <updated>2020-05-02T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2020/05/02/buy_a_car_with_data-pt1</id>
    
    <content type="html"><![CDATA[<p>I am currently looking for a used car, old but good enough for lasting a few years.</p>

<p>Since I never owned a car, and I lack the anecdotal experience of the car market that many people have, I am likely going to buy a <a href="https://en.wikipedia.org/wiki/Lemon_(automobile)">lemon</a>.</p>

<p>Well, let me try to <strong>buy a cheap lemon at least</strong>.</p>

<h1>Get the data</h1>

<h2>Autoscout24</h2>

<p>I think <a href="https://www.autoscout24.it/">autoscout24.it</a> is the eBay of used cars in Italy. The website lists many offers from car dealerships and private sellers, with powerful search functionality and a nice looking, website free of ads.</p>

<p><img src="http://clynamen.github.io/images/autoscout0.png" alt="" /></p>

<p>Autoscout24 does offer a <a href="https://autoscout24.github.io/api/#introduction-listing-creation-api-upload">RESTful API</a>, but it seems targeted to dealerships.</p>

<p>The best way for getting the data would be to find out how the website or the mobile app uses the API. This is what you want to do if you want to build a program that lasts for more than a few months. However, this could take some time since it <strong>involves inspecting the traffic and possibly some reversing</strong>.</p>

<p>Let&rsquo;s look at one page from the website instead:</p>

<p><img src="http://clynamen.github.io/images/autoscout1.png" alt="" /></p>

<p>That&rsquo;s it. A <strong>simple table</strong> with the details we need. That&rsquo;s really easy to parse with xpath.</p>

<p>How does the search work? You can choose many fields:</p>

<p><img src="http://clynamen.github.io/images/autoscout2.png" alt="" /></p>

<p>Let&rsquo;s run the search and inspect the url:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.autoscout24.it/lst?sort=standard&desc=0&offer=U&ustate=N%2CU&lon=7.683066&lat=45.068375&zip=Torino&zipr=10&cy=I&priceto=5000&pricefrom=2500&kmto=200000&kmfrom=10000&fregfrom=2010&atype=C</span></code></pre></td></tr></table></div></figure>


<p><strong>all the query parameters are nicely listed in the url</strong>. We can easily run any query.</p>

<h2>Scrapy</h2>

<p><a href="https://docs.scrapy.org/en/latest/intro/tutorial.html">Scrapy</a> is a well-designed python framework for scraping. It provides all the functionalities you need while taking care of the boilerplate code.</p>

<p>You can use its <strong><a href="https://docs.scrapy.org/en/latest/topics/shell.html">shell</a></strong> to quickly play with xpath and css selectors. Just start it with an url:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scrapy shell <span class="s1">&#39;https://www.autoscout24.it/annunci/volkswagen-polo-1-2-5p-trendline-benzina-nero-9c1c630f-ce6a-4d3a-b81b-be36702e318b&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and <strong>you get an IPython environment</strong> where the webpage result is ready to be processed.</p>

<p>Once you find out how to get the data you need from the page, you write a <strong><a href="https://docs.scrapy.org/en/latest/topics/spiders.html">Spider</a></strong>. The core of a Spider is just a single <code>parse()</code> function, where you process the response of a <strong>GET</strong> request.</p>

<p><code>parse()</code> conveniently uses the <strong>yield</strong> mechanism for processing each page. After extracting the data, you <strong>yield</strong> a simple dictionary (representing a single car in our case). This dictionary is appended to a designed output file (e.g. a simple csv).
Then, you <strong>yield</strong> a new <strong>GET</strong> request so that you will process the next pages.</p>

<p><strong>Less than 200 lines of python</strong> are enough for creating a dataset from autoscout.</p>

<h2>Preview of the Dataset</h2>

<p>I would have preferred to use Julia for this job, but there are no good scraping libraries currently. So, I will just use it for the data analysis part.</p>

<p>Let&rsquo;s <strong>look at the dataset</strong>:</p>

<p><img src="http://clynamen.github.io/images/autoscout3.png" alt="" /></p>

<p>As you can see, I am interested in just a few properties: price, mileage (km), matriculation date, fuel, etc. There is some missing data, we will deal with it later. The dataset includes <strong>about 2000 vehicles</strong> from sellers in Turin.</p>

<p>I selected gasoline or LPG vehicles due to traffic restrictions rules in my city. I don&rsquo;t really care about horsepower or model. Any 10 years old vehicle in the low price range will work for me. However, I will try to use many parameters for building a proper model for price prediction. Every time I will find a car I like, I will <strong>compare its price against the predicted one</strong>.</p>

<p><img src="http://clynamen.github.io/images/autoscout4.jpg" alt="" /></p>

<p>Actual analysis will be performed in the next post. Prepare yourself for a <strong>heavily technical post full of pie charts and linear regressions</strong>.</p>

<p>You can find the scraper code <a href="https://github.com/clynamen/car_purchase">here</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A basic HTTP WebM server in rust]]></title>
    <link href="http://clynamen.github.io/blog/2020/04/23/basic_http_webm_server_rust/"/>
    
    <updated>2020-04-23T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2020/04/23/basic_http_webm_server_rust</id>
    
    <content type="html"><![CDATA[<p>I am in the mid of developing a personal project which involves cameras and videostreaming.</p>

<p>While working on this project, I built a small port of the <a href="https://github.com/sdroege/http-launch">HTTP streaming server of Sebastian Dröge</a> <strong>from C into rust</strong>:</p>

<p><a href="https://github.com/clynamen/basic_http_webm_server_rust">clynamen/basic_http_webm_server_rust</a></p>

<p>The server uses a minimal tokio server and the <a href="https://gitlab.freedesktop.org/gstreamer/gstreamer-rs">gstreamer-rs</a> library (of which the same S. Dröge is the main contributor).</p>

<p>The main difference between the two version consists in the absence of the <strong>multisocketsink</strong> element, which is not currently available on rust. This element allows to connect multiple TCP sockets to the gstreamer pipeline, thus providing a simple way for sending the video to multiple clients. In the rust version, this is replaced (probably in a bad way) by an appsink and multiple <a href="https://doc.rust-lang.org/std/sync/mpsc/">mpsc</a> queues.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Programmatically create function in Julia with metaprogramming]]></title>
    <link href="http://clynamen.github.io/blog/2019/06/16/julia_def_fun_macro/"/>
    
    <updated>2019-06-16T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2019/06/16/julia_def_fun_macro</id>
    
    <content type="html"><![CDATA[<p>In the <a href="http://clynamen.github.io/blog/2019/05/31/julia_opencv/">last post</a>, I was evaluating various solutions for generating the <strong>Julia-OpenCV</strong> bindings I dream of.</p>

<p>I am currently studying how the <a href="https://github.com/JuliaInterop/libcxxwrap-julia/">libcxxwrap</a> library works, in order to check if it fits my requirements. I quickly noticed that it misses the capability of generating function with keywords (see the <a href="https://github.com/JuliaInterop/libcxxwrap-julia/issues/27">Github issue</a>). This feature would be really interesting for the binding since OpenCV uses a lot of default and keyword arguments, both of which are nicely supported in python.</p>

<p>But no worries, <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/index.html">Julia is a Lisp</a> (or, at least, looks very much like it for many reasons). It should be easy to manipulate function code in order to add defaults, keyword, etc&hellip;</p>

<p>Let&rsquo;s find out how.</p>

<h2>Basics</h2>

<p>The fundamentals of Julia metaprogramming are explained in <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/index.html">the official documentation</a>. You should read that before going further. However, we will start with the easy stuff.</p>

<p>First, let&rsquo;s write a macro that creates a function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">macro</span> <span class="n">make_fn1</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">name_str</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">$</span><span class="s">name&quot;</span>
</span><span class='line'>  <span class="k">quote</span>
</span><span class='line'>      <span class="k">function</span><span class="nf"> </span><span class="o">$(</span><span class="n">esc</span><span class="p">(</span><span class="n">name</span><span class="p">))()</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello &quot;</span><span class="p">,</span> <span class="o">$</span><span class="n">name_str</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">make_fn1</span><span class="p">(</span><span class="n">world</span><span class="p">)</span>
</span><span class='line'><span class="c"># Hello World!</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens when macro <strong>make_fn1</strong> is called? We first take value of the macro argument <strong>name</strong> and convert it into a string, which will be used later for printing. Then, we return an expression that defines a function. The name of the function comes from the same macro argument.
When the macro is called, the returned expression is evaluated and thus the function &lsquo;world&rsquo; is defined.</p>

<p>We can inspect the expression returned by <strong>make_fn1</strong> by using the @macroexpand macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&gt;</span> <span class="p">@</span><span class="n">macroexpand</span> <span class="p">@</span><span class="n">make_fn1</span><span class="p">(</span><span class="n">pizza</span><span class="p">)</span>
</span><span class='line'><span class="k">quote</span>
</span><span class='line'>    <span class="k">function</span><span class="nf"> pizza</span><span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="n">Main</span><span class="o">.</span><span class="n">println</span><span class="p">)(</span><span class="s">&quot;Hello &quot;</span><span class="p">,</span> <span class="s">&quot;pizza&quot;</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how in the function declaration we used <code>$(esc(name))</code> instead of just using <code>$(name)</code>. Otherwise, Julia <strong>hygiene rules</strong> will cause the function to have a random name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">macro</span> <span class="n">make_fn1_bad</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">name_str</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">$</span><span class="s">name&quot;</span>
</span><span class='line'>  <span class="k">quote</span>
</span><span class='line'>      <span class="k">function</span><span class="nf"> </span><span class="o">$(</span><span class="n">name</span><span class="p">)()</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello &quot;</span><span class="p">,</span> <span class="o">$</span><span class="n">name_str</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">julia</span><span class="o">&gt;</span> <span class="p">@</span><span class="n">macroexpand</span> <span class="p">@</span><span class="n">make_fn1_bad</span><span class="p">(</span><span class="n">pizza</span><span class="p">)</span>
</span><span class='line'><span class="k">quote</span>
</span><span class='line'>    <span class="k">function</span><span class="nf"> </span><span class="o">#</span><span class="mi">18</span><span class="c">#pizza() # &lt;- random name was generated</span>
</span><span class='line'>        <span class="p">(</span><span class="n">Main</span><span class="o">.</span><span class="n">println</span><span class="p">)(</span><span class="s">&quot;Hello &quot;</span><span class="p">,</span> <span class="s">&quot;pizza&quot;</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adding arguments</h2>

<p>Ok, we can now generate function with arbitrary names, but we still miss arguments. A possible solution for this was discussed in this <a href="https://discourse.julialang.org/t/defining-function-inside-a-macro/9139">discourse thread</a>.</p>

<p>This is the proposed solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">macro</span> <span class="n">make_fn2</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>   <span class="n">name_str</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">$</span><span class="s">name&quot;</span>
</span><span class='line'>   <span class="n">argstup</span> <span class="o">=</span> <span class="n">Tuple</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">quote</span>
</span><span class='line'>       <span class="k">function</span><span class="nf"> </span><span class="o">$(</span><span class="n">esc</span><span class="p">(</span><span class="n">name</span><span class="p">))(</span><span class="o">$</span><span class="p">(</span><span class="n">map</span><span class="p">(</span><span class="n">esc</span><span class="p">,</span> <span class="n">argstup</span><span class="p">)</span><span class="o">...</span><span class="p">))</span>
</span><span class='line'>           <span class="n">println</span><span class="p">(</span><span class="o">$</span><span class="n">name_str</span><span class="p">)</span>
</span><span class='line'>           <span class="n">map</span><span class="p">(</span><span class="n">println</span><span class="p">,</span> <span class="p">[(</span><span class="o">$</span><span class="p">(</span><span class="n">map</span><span class="p">(</span><span class="n">esc</span><span class="p">,</span> <span class="n">argstup</span><span class="p">)</span><span class="o">...</span><span class="p">))])</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="n">make_fn2</span><span class="p">(</span><span class="n">example_fun</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">julia</span><span class="o">&gt;</span> <span class="n">example_fun</span><span class="p">(</span><span class="mf">1.2</span><span class="p">,</span> <span class="s">&quot;dog&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="mf">1.2</span>
</span><span class='line'><span class="n">dog</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">julia</span><span class="o">&gt;</span> <span class="p">@</span><span class="n">macroexpand</span> <span class="p">@</span><span class="n">make_fn2</span><span class="p">(</span><span class="n">example_fun</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="k">quote</span>
</span><span class='line'>    <span class="c">#= /home/clynamen/software/tests/julia/main.jl:50 =#</span>
</span><span class='line'>    <span class="k">function</span><span class="nf"> sum_all</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>        <span class="c">#= /home/clynamen/software/tests/julia/main.jl:51 =#</span>
</span><span class='line'>        <span class="p">(</span><span class="n">Main</span><span class="o">.</span><span class="n">println</span><span class="p">)(</span><span class="s">&quot;sum_all&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="c">#= /home/clynamen/software/tests/julia/main.jl:52 =#</span>
</span><span class='line'>        <span class="p">(</span><span class="n">Main</span><span class="o">.</span><span class="n">map</span><span class="p">)(</span><span class="n">Main</span><span class="o">.</span><span class="n">println</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">])</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A more complex example</h2>

<p>ok, how to add default arguments now?</p>

<p>I have tried to extend the previous solution and failed.
I thought it was possible to use this substitution syntax again but I still didn&rsquo;t
figure out how the parser works with the macro output.</p>

<p><strong>However, there is a better way to do this</strong>: We can easily manipulate
the <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> programmatically,
by composing list of keywords and arguments. Even better, Julia allows you to
inspect the AST via the <code>@dump</code> macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&gt;</span> <span class="n">Meta</span><span class="o">.</span><span class="p">@</span><span class="n">dump</span><span class="p">(</span> <span class="n">function</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;hello&quot;</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="n">Expr</span>
</span><span class='line'>  <span class="n">head</span><span class="p">:</span> <span class="n">Symbol</span> <span class="k">function</span><span class="nf"></span>
</span><span class='line'><span class="nf">  args</span><span class="p">:</span> <span class="n">Array</span><span class="p">{</span><span class="kt">Any</span><span class="p">}((</span><span class="mi">2</span><span class="p">,))</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">:</span> <span class="n">Expr</span>
</span><span class='line'>      <span class="n">head</span><span class="p">:</span> <span class="n">Symbol</span> <span class="nb">tuple</span>
</span><span class='line'>      <span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">{</span><span class="kt">Any</span><span class="p">}((</span><span class="mi">3</span><span class="p">,))</span>
</span><span class='line'>        <span class="mi">1</span><span class="p">:</span> <span class="n">Symbol</span> <span class="n">a</span>
</span><span class='line'>        <span class="mi">2</span><span class="p">:</span> <span class="n">Symbol</span> <span class="n">b</span>
</span><span class='line'>        <span class="mi">3</span><span class="p">:</span> <span class="n">Expr</span>
</span><span class='line'>          <span class="n">head</span><span class="p">:</span> <span class="n">Symbol</span> <span class="o">=</span>
</span><span class='line'>          <span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">{</span><span class="kt">Any</span><span class="p">}((</span><span class="mi">2</span><span class="p">,))</span>
</span><span class='line'>            <span class="mi">1</span><span class="p">:</span> <span class="n">Symbol</span> <span class="n">c</span>
</span><span class='line'>            <span class="mi">2</span><span class="p">:</span> <span class="n">String</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'>    <span class="mi">2</span><span class="p">:</span> <span class="n">Expr</span>
</span><span class='line'>      <span class="n">head</span><span class="p">:</span> <span class="n">Symbol</span> <span class="n">block</span>
</span><span class='line'>      <span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">{</span><span class="kt">Any</span><span class="p">}((</span><span class="mi">1</span><span class="p">,))</span>
</span><span class='line'>        <span class="mi">1</span><span class="p">:</span> <span class="n">LineNumberNode</span>
</span><span class='line'>          <span class="n">line</span><span class="p">:</span> <span class="kt">Int64</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">file</span><span class="p">:</span> <span class="n">Symbol</span> <span class="n">none</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty handy: you can write an example of the expression you would like to build,
inspect its AST and use it as a reference.</p>

<p>Note how the function arguments are just a list of <code>Symbol</code>s and <code>Expr</code>essions.</p>

<p><strong>Finally</strong>, here an example of a macro that defines a function with default and keyword arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="k">macro</span> <span class="n">makefn</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>   <span class="c"># Let&#39;s start defining the name and</span>
</span><span class='line'>   <span class="c"># arguments declaration</span>
</span><span class='line'>   <span class="n">call</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(:</span><span class="n">call</span><span class="p">)</span>
</span><span class='line'>   <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">Symbol</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># keyword arguments of the new function</span>
</span><span class='line'>   <span class="n">kwargs_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># In julia, the keyword arguments are added at</span>
</span><span class='line'>   <span class="c"># the begin of the list, even if they appear</span>
</span><span class='line'>   <span class="c"># last in the syntax. So, process kwargs first:</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">arg</span> <span class="k">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">args</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">typeof</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="o">==</span> <span class="n">Symbol</span>
</span><span class='line'>         <span class="c"># plain keyword arg</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">kwargs_list</span><span class="p">,</span> <span class="n">esc</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span>
</span><span class='line'>      <span class="k">elseif</span> <span class="nb">typeof</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="o">==</span> <span class="n">Expr</span>
</span><span class='line'>         <span class="c"># default keyword arg</span>
</span><span class='line'>         <span class="n">kw</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(:</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">kw</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">esc</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">kw</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">arg</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">kwargs_list</span><span class="p">,</span> <span class="n">kw</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># Keyword arguments are defined in a</span>
</span><span class='line'>   <span class="c"># :parameters Expr</span>
</span><span class='line'>   <span class="n">parameters</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(:</span><span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>   <span class="n">parameters</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">kwargs_list</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># add the keyword arguments at the begin of</span>
</span><span class='line'>   <span class="c"># the argument list</span>
</span><span class='line'>   <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># now process plain arguments</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">arg</span> <span class="k">in</span> <span class="n">args</span><span class="o">.</span><span class="n">args</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">typeof</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="o">==</span> <span class="n">Symbol</span>
</span><span class='line'>         <span class="c"># normal arg</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">esc</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span>
</span><span class='line'>      <span class="k">elseif</span> <span class="nb">typeof</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="o">==</span> <span class="n">Expr</span>
</span><span class='line'>         <span class="c"># default arg</span>
</span><span class='line'>         <span class="n">kw</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(:</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">kw</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">esc</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">kw</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">arg</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>         <span class="n">push</span><span class="o">!</span><span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">kw</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># a function Expr has two arguments:</span>
</span><span class='line'>   <span class="c"># the declaration and the :block that defines the</span>
</span><span class='line'>   <span class="c"># function implementation.</span>
</span><span class='line'>   <span class="c"># For this example, we define an empty :block</span>
</span><span class='line'>   <span class="n">fn_args</span> <span class="o">=</span> <span class="p">[</span><span class="n">call</span><span class="p">,</span> <span class="n">Expr</span><span class="p">(:</span><span class="n">block</span><span class="p">)]</span>
</span><span class='line'>   <span class="n">fn</span> <span class="o">=</span> <span class="n">Expr</span><span class="p">(:</span><span class="n">function</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">append</span><span class="o">!</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
</span><span class='line'>   <span class="n">fn</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c"># example usage</span>
</span><span class='line'><span class="p">@</span><span class="n">makefn</span><span class="p">(</span><span class="s">&quot;more_complex_fun&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;hello&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">g</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the function generated by the macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&gt;</span> <span class="p">@</span><span class="n">macroexpand1</span> <span class="p">@</span><span class="n">makefn</span><span class="p">(</span><span class="s">&quot;more_complex_fun&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;hello&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">g</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">:(</span><span class="k">function</span><span class="nf"> </span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="n">more_complex_fun</span><span class="p">)(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&quot;hello&quot;</span><span class="p">;</span> <span class="n">f</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">g</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>I think the AST manipulation offers what I need for extending <strong>libcxxwrap</strong>. Probably it will
also be useful during the actual binding generation, allowing to automatically write Julia code that better integrates with the OpenCV interface.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Julia and the current status of OpenCV bindings]]></title>
    <link href="http://clynamen.github.io/blog/2019/05/31/julia_opencv/"/>
    
    <updated>2019-05-31T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2019/05/31/julia_opencv</id>
    
    <content type="html"><![CDATA[<p><strong>Recently the Julia <a href="https://github.com/JuliaInterop/Cxx.jl">Cxx.jl package</a> came back to life again.</strong> The package uses Clang for calling C++ at runtime, possibly making it the most interesting tool for interfacing with a lot of C++ libraries.
Since Julia seems really promising for writing Computer Vision algorithms, both for support for Machine Learning and linear algebra in general with high performance, I wanted to try the OpenCV bindings.
The idea seemed appealing to quite some people since there are three attempts in this application, that not surprisingly share the same name:</p>

<ul>
<li><a href="https://github.com/JuliaOpenCV/OpenCV.jl">OpenCV.jl</a></li>
<li><a href="https://github.com/maxruby/OpenCV.jl">OpenCV.jl</a></li>
<li>..and&hellip; <a href="https://github.com/TakekazuKATO/OpenCV.jl">OpenCV.jl</a></li>
</ul>


<p>A bit sadly, all three projects seem abandoned now. I am not surprised since both Julia and OpenCV were undergoing many changes in the latest years. Even if bindings are a thin layer of intermixed language code, it is quite a burden to maintain them, especially during the initial phase where no one has a real interest in them.</p>

<p><strong>The OpenCV project itself provides two main bindings, for python and java.</strong> I have never used the java binding, but I can assure you the python binding is damn good. Since all the hard work is done by the OpenCV library itself and, elsewhere, by numpy, it is possible to quickly use the complex algorithm offered by OpenCV with C++ performance. These bindings are two extra modules built along with the full source, so they are provided in almost all distributions.
Most importantly, being included in the same repo, these bindings are maintained by the same OpenCV developers.</p>

<p>The generation of bindings for other languages, however, is left as an exercise to the reader.</p>

<p>As explained in the <a href="https://docs.opencv.org/3.4/da/d49/tutorial_py_bindings_basics.html">official documentation</a> the generation of java and python binding is a quick and dirty process: A python script parses the headers and provides function signatures to a generator, which in turn generates the python (or java) code using template strings and some handcoded files. The process does not seem really modular, and probably today there are better options, especially for the parser (e.g. libclang). But being self-contained and targeted for opencv only, <strong>it just works</strong>.</p>

<p>As for Julia, lovers of other languages created their own bindings. Just to name a few:</p>

<ul>
<li><a href="https://github.com/twistedfall/opencv-rust">opencv-rust</a></li>
<li><a href="https://github.com/peterbraden/node-opencv">node-opencv</a></li>
<li><a href="http://hackage.haskell.org/package/opencv">haskell - opencv</a></li>
</ul>


<p>Needless to say, these libraries use different implementation approaches:</p>

<ul>
<li>Writing a C library first, and then use the <a href="https://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a> for C</li>
<li>Wrap the C++ code in a library that can be imported in the desired language.</li>
<li>Perform a C++ low-level call</li>
</ul>


<p>Now, all the three Julia implementation cited above seems to have taken the &lsquo;Call C++ code directly&rsquo; approach using the Cxx.jl library. After all, clang is powerful enough to do this kind of magic today. It is kind of amazing that compiled and JIT code can talk each other, almost if as if we are using languages built upon a high-level runtime (e.g. C# and VisualBasic on CLR, Java and Scala on the JVM etc&hellip;).</p>

<p>So, coming back to the original problem, I would like to improve or write an OpenCV binding for Julia. Still, <strong>I am not sure which is the best approach.</strong>
Using the Cxx.jl library, even if quite elegant and easy to read (since all the ugly stuff stays in the Cxx.jl module itself) involves writing most of the code manually. Whenever functions are added/removed/modified in OpenCV, we need to manually update our bindings.
Of course, this happens often, but not so often to be an unmanageable burden (it is the interest of the same OpenCV developers to change the API slowly, without breaking changes).</p>

<p><strong>However the parser approach used by OpenCV makes more sense</strong>: Code is generated automatically, except for a few special cases for convenience or performance reason. Only small updates should be required, new functions will be automatically supported, and maybe one day the binding can be merged in the same OpenCV library.</p>

<p>It is hard to chose one of the two paths without prototyping a bit with them. I am currently evaluating the generator approach. I will write about the progress in a new post, hopefully soon.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Experimente mit Rust - Carsim2d [DE]]]></title>
    <link href="http://clynamen.github.io/blog/2019/02/04/carsim2d/"/>
    
    <updated>2019-02-04T01:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2019/02/04/carsim2d</id>
    
    <content type="html"><![CDATA[<p>Es sind Jahre, Ich wollte etwas mit Rust machen.
Als moderner C++ Programmierer zu sein mag ich natürlich Rust:
Die Programmiersprache hat die Funktione, die mir am besten gefallen:</p>

<ul>
<li>Kompilierzeitprüfungen</li>
<li>Guter package manager</li>
<li>Kein garbage-collector, aber ein borrow-checker</li>
</ul>


<p>Ich hatte die Idee, ein Videospiele zu machen. Aber Ich weiß, Ich brauche mehr Zeit.
Rust is nicht so gut als C++ für Videospiele: es ist möglich, Opengl oder Vulkan zu verwenden.
Aber es gibt keine or klein library dafür. Zum Beispiel, <a href="https://www.piston.rs/">piston</a> ist eine 2D Game library mit wenige, langsame Funktionen.
<a href="https://www.amethyst.rs/">Amethyst</a> ist vielversprechender. Diese library ist insipiriert aus data-driven Prinzipen und
es ist auf eine <a href="https://github.com/slide-rs/specs">Entity Component System</a> aufgebaut. Amethyst ist jedoch noch unreif.  Die Entwicker versuchen, die Grafik-Engine schenller zu machen.
Außerdem würde Ich gerne Opengl vergessen und geh direkt mit Vulkan, aber seine Gemeinschaft ist kleine.</p>

<p>Anstatt ein Videospiele zu machen, suchte Ich nach einer anderen Chance.
Ich brauchte ein einfach Fahrzeug-Simulator auf Arbeit mit ROS-Unterstützung. Keine komplexen Grafiken,
vielleicht etwas Physik. Die gegenwärtig verfügbar libraries für Rust sollten passen.</p>

<h3>Roadsim2D</h3>

<p>Roadsim2D ist nur a toy-project. Ich wollte ein Simulator wo man kannt 2D Autos Steuren</p>

<p>Ich schreibe roadsim2D als mein erstes rust Projekt. Ich lerne immer noch, wie die borrow-checker funktioniert.
Ich muss sagen: am Anfang, man verschwendet Zeit auch im die einfachesten Dinge. Der compiler hilft dir mit Fehlerbeschreibung, doch die richtige Lösung ist oft spezifisch.
Schließlich du musst lernen wie den Programm besser entwürfen. Du lernst wenn du spielst gegen den compiler.
Ich habe piston benutzt, um basisch Form zeichen. Die Library steuert geometrisch Transform, so ist es leicht eine Kamera hinzufügen. Ich wollte das nicht kodieren.</p>

<p>Nach dem die Kamera, die Autos wurden hinzugefügt. Ihre Bewegungen folgen die <a href="https://en.wikipedia.org/wiki/Ackermann_steering_geometry">Ackermann</a> Lenkmodell.
Ich hatte bald Probleme mit die Borrow-checker: zu viele Variables werden benutzen von zu viele Komponente.
Es wurde klar, ich musste den Code umgestalten.</p>

<p>Beim Lesen über Amethyst, Ich habe <a href="https://github.com/slide-rs/specs">specs</a> entdeckt. specs ist eine library fur data-oriented programming, ein Paradigma in Game Development sehr bekannt.
In diese library, der Programmierer musst Komponenten und Systemen definieren. Komponenten haben
data, Systeme haben Code, die die Komponenten verändern.
Nicht nur das macht das Programm (potenziell) schneller, das macht alles einfacher als voher zu codieren. Mit specs, es ist explizit, was ist konstant und was kannt änderen. Und du kannst das Leben von Komponenten mit die Entitäten steuern.</p>

<p>Zum Beispiel, schauen wir mal, wie die Physik von Autos ist aktualisiert:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="p">,</span> <span class="nl">&#39;b</span><span class="o">&gt;</span> <span class="n">System</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">UpdateCarsSys</span><span class="o">&lt;</span><span class="nl">&#39;b</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">SystemData</span> <span class="o">=</span> <span class="p">(</span><span class="n">ReadExpect</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="p">,</span> <span class="n">UpdateDeltaTime</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">WriteStorage</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="p">,</span> <span class="n">PhysicsComponent</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">ReadStorage</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="p">,</span> <span class="n">Car</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="p">(</span><span class="n">update_delta_time</span><span class="p">,</span> <span class="k">mut</span> <span class="n">physics_components</span><span class="p">,</span> <span class="k">mut</span> <span class="n">cars</span><span class="p">)</span><span class="o">:</span> <span class="n">Self</span><span class="o">::</span><span class="n">SystemData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">physics_component</span><span class="p">,</span> <span class="n">car</span><span class="p">)</span> <span class="k">in</span> <span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">physics_components</span><span class="p">,</span> <span class="o">&amp;</span> <span class="n">cars</span><span class="p">).</span><span class="n">join</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">let</span> <span class="k">mut</span> <span class="n">rigid_body</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">physics_world</span><span class="p">.</span><span class="n">rigid_body_mut</span><span class="p">(</span><span class="n">physics_component</span><span class="p">.</span><span class="n">body_handle</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&quot;car rigid body not found&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">rigid_body</span><span class="p">.</span><span class="n">position</span><span class="p">().</span><span class="n">translation</span><span class="p">.</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">rigid_body</span><span class="p">.</span><span class="n">position</span><span class="p">().</span><span class="n">rotation</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">vel</span> <span class="o">=</span> <span class="n">rigid_body</span><span class="p">.</span><span class="n">velocity</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">let</span> <span class="n">rot</span> <span class="o">:</span> <span class="n">Basis2</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Rotation2</span><span class="o">::&lt;</span><span class="kt">f64</span><span class="o">&gt;::</span><span class="n">from_angle</span><span class="p">(</span><span class="n">Rad</span><span class="p">(</span><span class="n">rot</span><span class="p">.</span><span class="n">unwrap</span><span class="p">().</span><span class="n">re</span><span class="p">));</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">yaw_increment</span> <span class="o">=</span> <span class="n">vel</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="k">as</span> <span class="kt">f32</span> <span class="o">/</span> <span class="p">(</span><span class="n">car</span><span class="p">.</span><span class="n">bb_size</span><span class="p">.</span><span class="n">height</span> <span class="k">as</span> <span class="kt">f32</span> <span class="o">/</span> <span class="mf">2.0</span><span class="k">f32</span><span class="p">)</span>  <span class="o">*</span>  <span class="n">car</span><span class="p">.</span><span class="n">wheel_yaw</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="n">rigid_body</span><span class="p">.</span><span class="n">set_angular_velocity</span><span class="p">(</span><span class="n">yaw_increment</span> <span class="k">as</span> <span class="kt">f64</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>UpdateCarsSys ist eine Klasse, die die Winkelgeschwindigkeit nach die Ackermann Lenkmodell  verändern. Die Klasses tut nur das. Die run() Methode wird bei jedem Frame laufen.
In ein System, man kannt eine Query ǘber die Komponenten tun. Dann, kannst du die Ergebnisliste iteriren. Die Komponenten, die du kannst ändern, können mit <strong>mut</strong> markiert werden.</p>

<h2>Links</h2>

<p><a href="https://github.com/clynamen/roadsim2d">roadsim2d</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Self Driving Car Weekly Highlights | Week 08/10/17 - 15/10/17 [EN]]]></title>
    <link href="http://clynamen.github.io/blog/2017/10/15/sdc-weekly_de/"/>
    
    <updated>2017-10-15T00:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2017/10/15/sdc-weekly_de</id>
    
    <content type="html"><![CDATA[<h2><strong>General Motors</strong> kauft <strong>Strobe</strong>, solid-state lidar company</h2>

<p><em>Note: This post was translated from English and reviewed with google translate</em></p>

<p>Dies ist die größte Wichtigste Neuigkeit der Woche. Wir wissen gany genau, dass viele Automobilhersteller mögen solid-state Lidars: Selbst wenn drehend Laser Scanner arbeiten für Forschung und Prototypen (hohe Leistung und Genaugigkeit, aber hohe Kosten) man denkt nicht, sie benutzen in Massenproduktion: rotierende Komponenten halten nicht lange für Anwendung wo Genauigkeit wichtig ist. Du willst nicht, dass die Benutzer ihre Autos zurückbringen, um Lidars zu reparieren</p>

<p>Solid State Lidars wirklich interessant aussehen: keine beweglichen Teile, alles unterbringet in ein Chip, mit geringen Kosten, vergleichbar Genaiugkeit und Reichweite. Aber es gibt ein nur Problem: Wir können sie leicht machen. Trotz sie sind bekannt für einegen Jahren, Solid State Lidars sind schwer zur produzieren. Naturlich dank Investitionen Firma verbessern ihre Lidars von Jahr zur Jahr und das Entwicklung von Konsumgütern ist in der nähe. Du erinnerst dich vielleicht, das Gleiche passiert mit ToF Cameras: Kosten ging von Tausende von Dollars bis ein paar 100$ in ein wenige Jahren (denke an Xbox One Kinect heutzutage).</p>

<p>Es gibt einigen Firmas wie Strobe auf dem Markt. Sie sind noch in ihrer Start-up Phase so es macht Sinn, sie jetzt zu kaufen. Die Entscheidung der Chefs von GM scheint gut wenn man bedenkt, dass andere Firma wird ähnlich tun: <a href="https://www.forbes.com/sites/samabuelsamid/2016/08/16/ford-and-baidu-lead-new-150-million-investment-in-lidar-maker-velodyne/#e23884e1de78">Ford investiert in Velodyne im letzen Jahr</a>, <a href="http://www.eenewsautomotive.com/news/continental-buys-lidar-business-asc">Continental kauft ASC</a>, Tesla&hellip;</p>

<p>&hellip;Nun, Tesls sagt: <em>&ldquo;Mann, keine Lidars, wir Haben Cameras&rdquo;</em>.</p>

<p>Und sie sind allein:</p>

<h2><strong>Comma.ai</strong> shares cool and shiny deep learning videos</h2>

<p>Comma.ai teilt neue und glänzend deep learning Videos</p>

<p>Die Firma von George Hotz liebt cameras. Sie sind billig,
Man kann finden sie an ein handy und am wichtigsten Sie
sind menschliche Augen ähnlich.
Und wenn ein Mesnch mit seinen Augen fahren kann, warum sollte
dann kein Computer? Das is der gleich Ansatz von Tesla,
aber Comma.ai scheint  di meinsten seiner Resourcen
auf Deep Learning investieren zu.</p>

<p>Zum Beispiel: image segmentation:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">This is a single frame no context prediction. Imagine once I get the unsupervised temporal working. Computer vision is unreal! <a href="https://t.co/FhoLSkURSF">pic.twitter.com/FhoLSkURSF</a></p>&mdash; comma ai (@comma_ai) <a href="https://twitter.com/comma_ai/status/914193480280293376?ref_src=twsrc%5Etfw">September 30, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br/></p>

<p>&hellip; oder, du weißt , ersetyen Lidars für <strong>Depth Data</strong>:</p>

<p><br/></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Depth. Trained entirely in simulation. <a href="https://t.co/8sY8IATjfn">pic.twitter.com/8sY8IATjfn</a></p>&mdash; comma ai (@comma_ai) <a href="https://twitter.com/comma_ai/status/917838943030165504?ref_src=twsrc%5Etfw">October 10, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br/></p>

<p>Es ist interessant das Trainingsdaten wurden geniert mit annotiert Bilden (dank dem <a href="https://commacoloring.herokuapp.com/">adult coloring books Projekt</a> ) und Simulationen</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Self Driving Car Weekly Highlights | Week 08/10/17 - 15/10/17 [DE]]]></title>
    <link href="http://clynamen.github.io/blog/2017/10/15/sdc-weekly/"/>
    
    <updated>2017-10-15T00:00:00+02:00</updated>
    <id>http://clynamen.github.io/blog/2017/10/15/sdc-weekly</id>
    
    <content type="html"><![CDATA[<p><em>So, as you can see it&rsquo;s long time I don&rsquo;t write anything on this blog. Despite the intention to write short tutorials, personal opinions, and other technical stuff, this blog was always at the bottom of my always-increasing to-do stack.
Why am I then committing myself to write a weekly update on the status of self-driving car development and research? Well, as always there is both a practical argument and a leisure reason: I love talking about this field, which is continuously evolving with exciting changes every day, and I am currently learning German, thus I want to exercise my writing skills daily (which, at the moment, are really bad. But fear not: the posts will be published in English too.)
This series of post will be mostly based on news published on other websites or forums. So don&rsquo;t expect to find the latest rumors but, instead, a review of most important events happened during the week.</em></p>

<h2><strong>General Motors</strong> buys <strong>Strobe</strong>, solid-state lidar company</h2>

<p>This is definitely the biggest news of the week. We know quite well that many cars manufacturers have high expectations on
solid-state lidars: While rotating laser scanner works for research or prototypes (high performance and accuracy, yet high costs) it is unthinkable to use them in actual user mass-production: Moving an array of laser around accurately requires high manufacturing costs and, most importantly continuously high frequency rotating components do not last long for accurate applications. You don&rsquo;t want users to bring their car back every year for replacing their faulty lidar.</p>

<p><strong>Solid state lidars look really interesting instead</strong>: no moving parts, everything fits in a single chip, lower costs and comparable accuracy and range. Only problem: we are not quite there yet. Despite being known for a few years, solid-state lidars are quite hard to implement. Of course, now that money is poured into, companies are improving their lidars year by year and the development of off-the-shelf consumer solution looks near. You may remember the same happened to ToF cameras: cost decreased from thousands of dollars to a couple 100$ in a few years (think about the Xbox One Kinect today).</p>

<p>There are just a few companies like <strong>Strobe</strong> around. They are still in their start-up phase and thus it make sense to buy them now. We can agree that the decision of <strong>GM</strong>&rsquo;s board seems quite good considering that other companies will probably do something similar in the future: <a href="https://www.forbes.com/sites/samabuelsamid/2016/08/16/ford-and-baidu-lead-new-150-million-investment-in-lidar-maker-velodyne/#e23884e1de78">Ford invested in Velodyne last year</a>, <a href="http://www.eenewsautomotive.com/news/continental-buys-lidar-business-asc">Continental bought ASC</a>, Tesla&hellip;</p>

<p>&hellip;Well, <strong>Tesla</strong> says &ldquo;<em>Fuck, we don&rsquo;t use lidars, we have <strong>cameras</strong></em>&rdquo;.</p>

<p>And they are not alone:</p>

<h2><strong>Comma.ai</strong> shares cool and shiny deep learning videos</h2>

<p><strong>George Hotz</strong>&rsquo;s company loves cameras. They are cheap, they can be found on a mobile phone and most importantly they are the closest thing to an human eye. <strong>And if a human can drive a car with his eyes, why shouldn&rsquo;t a computer</strong>?
This is the same approach of Tesla, expect that Comma.ai seems to invest most of his resources on deep learning.
We know that the Line Keeping Assistant algorithm of <a href="https://github.com/commaai/openpilot/">openpilot</a> is based on an end-to-end deep neural network, but lately the company is looking to exploit DNN for other scopes:</p>

<p>For instance <strong>image segmentation</strong>:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">This is a single frame no context prediction. Imagine once I get the unsupervised temporal working. Computer vision is unreal! <a href="https://t.co/FhoLSkURSF">pic.twitter.com/FhoLSkURSF</a></p>&mdash; comma ai (@comma_ai) <a href="https://twitter.com/comma_ai/status/914193480280293376?ref_src=twsrc%5Etfw">September 30, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br/></p>

<p>&hellip; or, you know, replacing the previously cited Lidars for <strong>depth data</strong></p>

<p><br/></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Depth. Trained entirely in simulation. <a href="https://t.co/8sY8IATjfn">pic.twitter.com/8sY8IATjfn</a></p>&mdash; comma ai (@comma_ai) <a href="https://twitter.com/comma_ai/status/917838943030165504?ref_src=twsrc%5Etfw">October 10, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br/></p>

<p>It is interesting to note how the training data was respectively generated by manually  annotated images (thanks to the <a href="https://commacoloring.herokuapp.com/">adult coloring books project</a> ) and simulations.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Outline in Unity with mesh transparency]]></title>
    <link href="http://clynamen.github.io/blog/2014/06/24/outline-in-unity-with-mesh-transparency/"/>
    
    <updated>2014-06-24T02:50:30+02:00</updated>
    <id>http://clynamen.github.io/blog/2014/06/24/outline-in-unity-with-mesh-transparency</id>
    
    <content type="html"><![CDATA[<hr />

<p>This post was originally published on <a href="http://nihilistdev.blogspot.it/2013/05/outline-in-unity-with-mesh-transparency.html">my previous blog</a></p>

<hr />

<p>Here I found a shader for Unity to obtain an outline of a mesh.</p>

<p><a href="http://answers.unity3d.com/questions/141229/making-a-silhouette-outline-shader.html">http://answers.unity3d.com/questions/141229/making-a-silhouette-outline-shader.html</a></p>

<p>This shader uses a pass to create a slightly bigger mesh behind the original one.
This is a good solution (at least in Unity), but only for convex/non transparent object. The fragments of the outline will indeed appear behind the mesh:</p>

<p><img src="http://3.bp.blogspot.com/-U_85pnhDsoo/UaFLismy3PI/AAAAAAAAAMU/sp3YP3sF3Ow/s320/11190-untitled.jpg" alt="transparency-shader" /></p>

<p><strong>We can remove the fragments behind the mesh</strong> modifying the depth buffer with a duplicated object.
The original object writes to the z-buffer, so the duplicated object (i.e. the one that act as an outline) will be partially culled by the original one.</p>

<p>In order to obtain this, we can use these shaders:</p>

<p><strong>Transparent shader</strong> for the original object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Shader</span> <span class="s">&quot;Outline/Transparent&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Properties</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_color</span> <span class="p">(</span><span class="s">&quot;Color&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SubShader</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Tags</span> <span class="p">{</span><span class="s">&quot;Queue&quot;</span> <span class="o">=</span> <span class="s">&quot;Geometry+1&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">Pass</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Blend</span> <span class="n">SrcAlpha</span> <span class="n">OneMinusSrcAlpha</span>
</span><span class='line'>        <span class="n">Lighting</span> <span class="n">On</span>
</span><span class='line'>        <span class="n">ZWrite</span> <span class="n">On</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Material</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Diffuse</span> <span class="p">[</span><span class="n">_color</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Outline shader for the outline</strong>, it will be applied to the duplicated object (Note: this is a mod of the shader quoted at the begin)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Shader</span> <span class="s">&quot;Outline/Outline&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Properties</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">_OutlineColor</span> <span class="p">(</span><span class="s">&quot;Outline Color&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">_Outline</span> <span class="p">(</span><span class="s">&quot;Outline width&quot;</span><span class="p">,</span> <span class="n">Range</span> <span class="p">(</span><span class="mf">.002</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">))</span> <span class="o">=</span> <span class="mf">.005</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGINCLUDE</span>
</span><span class='line'>    <span class="cp">#include &quot;UnityCG.cginc&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">appdata</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float4</span> <span class="nl">vertex</span> <span class="p">:</span> <span class="n">POSITION</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float3</span> <span class="nl">normal</span> <span class="p">:</span> <span class="n">NORMAL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">v2f</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float4</span> <span class="nl">pos</span> <span class="p">:</span> <span class="n">POSITION</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float4</span> <span class="nl">color</span> <span class="p">:</span> <span class="n">COLOR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uniform</span> <span class="kt">float</span> <span class="n">_Outline</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float4</span> <span class="n">_OutlineColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">v2f</span> <span class="nf">vert</span><span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// just make a copy of incoming vertex data but scaled according to normal direction</span>
</span><span class='line'>      <span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>      <span class="n">o</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">mul</span><span class="p">(</span><span class="n">UNITY_MATRIX_MVP</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">float3</span> <span class="n">norm</span> <span class="o">=</span> <span class="n">mul</span> <span class="p">((</span><span class="n">float3x3</span><span class="p">)</span><span class="n">UNITY_MATRIX_IT_MV</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">normal</span><span class="p">);</span>
</span><span class='line'>      <span class="n">float2</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">TransformViewToProjection</span><span class="p">(</span><span class="n">norm</span><span class="p">.</span><span class="n">xy</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">o</span><span class="p">.</span><span class="n">pos</span><span class="p">.</span><span class="n">xy</span> <span class="o">+=</span> <span class="n">offset</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">pos</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">_Outline</span><span class="p">;</span>
</span><span class='line'>      <span class="n">o</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">_OutlineColor</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">ENDCG</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SubShader</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Tags</span> <span class="p">{</span><span class="s">&quot;Queue&quot;</span> <span class="o">=</span> <span class="s">&quot;Overlay&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Pass</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Name</span> <span class="s">&quot;OUTLINE&quot;</span>
</span><span class='line'>        <span class="n">Tags</span> <span class="p">{</span> <span class="s">&quot;LightMode&quot;</span> <span class="o">=</span> <span class="s">&quot;Always&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Cull</span> <span class="n">Front</span>
</span><span class='line'>        <span class="n">ZWrite</span> <span class="n">On</span>
</span><span class='line'>        <span class="n">ZTest</span> <span class="n">Less</span>
</span><span class='line'>        <span class="n">Blend</span> <span class="n">SrcAlpha</span> <span class="n">OneMinusSrcAlpha</span>
</span><span class='line'>        <span class="n">ColorMask</span> <span class="n">RGB</span>
</span><span class='line'>        <span class="n">Offset</span> <span class="mi">15</span><span class="p">,</span><span class="mi">15</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGPROGRAM</span>
</span><span class='line'>        <span class="cp">#pragma vertex vert</span>
</span><span class='line'>        <span class="cp">#pragma fragment frag</span>
</span><span class='line'>          <span class="n">half4</span> <span class="n">frag</span><span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span><span class="n">COLOR</span> <span class="p">{</span> <span class="k">return</span> <span class="n">i</span><span class="p">.</span><span class="n">color</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">ENDCG</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SubShader</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Tags</span> <span class="p">{</span><span class="s">&quot;Queue&quot;</span> <span class="o">=</span> <span class="s">&quot;Overlay&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">CGPROGRAM</span>
</span><span class='line'>      <span class="cp">#pragma surface surf Lambert</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
</span><span class='line'>      <span class="n">fixed4</span> <span class="n">_Color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">Input</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv_MainTex</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">surf</span> <span class="p">(</span><span class="n">Input</span> <span class="n">IN</span><span class="p">,</span> <span class="n">inout</span> <span class="n">SurfaceOutput</span> <span class="n">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fixed4</span> <span class="n">c</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">uv_MainTex</span><span class="p">)</span> <span class="o">*</span> <span class="n">_Color</span><span class="p">;</span>
</span><span class='line'>        <span class="n">o</span><span class="p">.</span><span class="n">Albedo</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">rgb</span><span class="p">;</span>
</span><span class='line'>        <span class="n">o</span><span class="p">.</span><span class="n">Alpha</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">ENDCG</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Pass</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Name</span> <span class="s">&quot;OUTLINE&quot;</span>
</span><span class='line'>        <span class="n">Tags</span> <span class="p">{</span> <span class="s">&quot;LightMode&quot;</span> <span class="o">=</span> <span class="s">&quot;Always&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">Cull</span> <span class="n">Front</span>
</span><span class='line'>        <span class="n">ZWrite</span> <span class="n">On</span>
</span><span class='line'>        <span class="n">ColorMask</span> <span class="n">RGB</span>
</span><span class='line'>        <span class="n">Blend</span> <span class="n">SrcAlpha</span> <span class="n">OneMinusSrcAlpha</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGPROGRAM</span>
</span><span class='line'>        <span class="cp">#pragma vertex vert</span>
</span><span class='line'>        <span class="cp">#pragma exclude_renderers gles xbox360 ps3</span>
</span><span class='line'>        <span class="n">ENDCG</span>
</span><span class='line'>        <span class="n">SetTexture</span> <span class="p">[</span><span class="n">_MainTex</span><span class="p">]</span> <span class="p">{</span> <span class="n">combine</span> <span class="n">primary</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Fallback</span> <span class="s">&quot;Diffuse&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is pretty good:</p>

<p><img src="http://3.bp.blogspot.com/-eMUVWnQnrQY/UaFLk6o7m7I/AAAAAAAAAMc/J9_xlm1-NFY/s320/Untitled.png" alt="shader" /></p>

<p>Finally, here it is a Unity script that automatically creates the outline effect when applied to an object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="n">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Outliner</span> <span class="o">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">Color</span> <span class="n">meshColor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Color</span><span class="p">(</span><span class="mf">1f</span><span class="p">,</span><span class="mf">1f</span><span class="p">,</span><span class="mf">1f</span><span class="p">,</span><span class="mf">0.5f</span><span class="p">);</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Color</span> <span class="n">outlineColor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Color</span><span class="p">(</span><span class="mf">1f</span><span class="p">,</span><span class="mf">1f</span><span class="p">,</span><span class="mf">0f</span><span class="p">,</span><span class="mf">1f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use this for initialization</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the transparent material to this object</span>
</span><span class='line'>    <span class="n">MeshRenderer</span> <span class="n">meshRenderer</span> <span class="o">=</span> <span class="n">GetComponent</span><span class="o">&lt;</span><span class="n">meshrenderer</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Material</span><span class="p">[]</span> <span class="n">materials</span> <span class="o">=</span> <span class="n">meshRenderer</span><span class="p">.</span><span class="n">materials</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">materialsNum</span> <span class="o">=</span> <span class="n">materials</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">materialsNum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">materials</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">shader</span> <span class="o">=</span> <span class="n">Shader</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="s">&quot;Outline/Transparent&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">materials</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">SetColor</span><span class="p">(</span><span class="s">&quot;_color&quot;</span><span class="p">,</span> <span class="n">meshColor</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create copy of this object, this will have the shader that makes the real outline</span>
</span><span class='line'>    <span class="n">GameObject</span> <span class="n">outlineObj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameObject</span><span class="p">();</span>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotation</span><span class="p">;</span>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">AddComponent</span><span class="o">&lt;</span><span class="n">meshfilter</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">AddComponent</span><span class="o">&lt;</span><span class="n">meshrenderer</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Mesh</span> <span class="n">mesh</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mesh</span> <span class="o">=</span> <span class="p">(</span><span class="n">Mesh</span><span class="p">)</span> <span class="n">Instantiate</span><span class="p">(</span><span class="n">GetComponent</span><span class="o">&lt;</span><span class="n">meshfilter</span><span class="o">&gt;</span><span class="p">().</span><span class="n">mesh</span><span class="p">);</span>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">GetComponent</span><span class="o">&lt;</span><span class="n">meshfilter</span><span class="o">&gt;</span><span class="p">().</span><span class="n">mesh</span> <span class="o">=</span> <span class="n">mesh</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
</span><span class='line'>    <span class="n">materials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="p">[</span><span class="n">materialsNum</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">materialsNum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">materials</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Material</span><span class="p">(</span><span class="n">Shader</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="s">&quot;Outline/Outline&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">materials</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">SetColor</span><span class="p">(</span><span class="s">&quot;_OutlineColor&quot;</span><span class="p">,</span> <span class="n">outlineColor</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">outlineObj</span><span class="p">.</span><span class="n">GetComponent</span><span class="o">&lt;</span><span class="n">meshrenderer</span><span class="o">&gt;</span><span class="p">().</span><span class="n">materials</span> <span class="o">=</span> <span class="n">materials</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Voxelization in Unity]]></title>
    <link href="http://clynamen.github.io/blog/2014/06/24/voxelization-in-unity/"/>
    
    <updated>2014-06-24T02:15:57+02:00</updated>
    <id>http://clynamen.github.io/blog/2014/06/24/voxelization-in-unity</id>
    
    <content type="html"><![CDATA[<hr />

<p>This post was originally published on <a href="http://nihilistdev.blogspot.it/2012/08/voxelization-in-unity.html">my previous blog</a></p>

<hr />

<h2>A few words on Voxelization and SAT</h2>

<p>In this post we will create a script for voxelize any kind of mesh in unity. Voxelization could be useful in physical simulations, terrain representation and every situation where we need to manipulate the hollow inside of a mesh.
A great post about Voxelization can be found <a href="http://blog.wolfire.com/2009/11/Triangle-mesh-voxelization">&ldquo;here&rdquo;</a>, on Wolfire blog. The post explains how the voxelization of a triangle mesh is done in Overgrowth, we will use the same method in unity.</p>

<p>The creation of a voxel model that reproduces the mesh is achived trough a 3d grid of cubes and an intersection test for each triangle against each cube.
The author states that he uses a AABB-AABB intersection test to check if a cube and a triangle are intersected. This is very fast and appropriate for most situations, but we want the general solution.</p>

<p>A slower but precise way to test the intersection is to use the Separating Axis Theorem. <a href="http://fileadmin.cs.lth.se/cs/personal/tomas_akenine-moller/pubs/tribox.pdf">This paper</a> explains the use of the SAT for Triangle-AABB intersection.</p>

<p>An implementation in C++  of this algorithm was written by Mike Vandelay and can be found <a href="http://planet-source-code.com">planet-source-code.com</a>. I rewrote the same code in unityscript.</p>

<p>Basically the SAT works like this</p>

<p><strong>Take 13 axes:</strong> 3 axes are the cube face normals, 1 axis is the triangle face normal, 9 are the dot product between the first 3 axes and the triangles edges.</p>

<p><strong>Project the AABB and the triangle on each axis.</strong> If the projections intersects on an axis, then the AABB and the triangle are intersected, otherwise they aren&rsquo;t.
<a href="http://www.codezealot.org/archives/55">here</a> a much more detailed explanation of the SAT.</p>

<p>Now, let&rsquo;s see how implement all this in unity.</p>

<hr />

<h2>Mesh Voxelization</h2>

<p><img src="http://3.bp.blogspot.com/-5ooEt8-TR_0/UD3yeC_B8_I/AAAAAAAAAIM/keRIYymy1WE/s1600/voxelizedSphere.png" alt="voxelized sphere" /></p>

<p>The complete script for voxelization can be found <a href="https://github.com/clynamen/Unity-utils/blob/master/Voxelization.js">here on my github</a>.</p>

<p>We are going to use a grid for creating a voxel model. Each Grid is formed by cubes of the same size, these are the grid properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">public</span> <span class="kr">class</span> <span class="nx">AABCGrid</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">side</span> <span class="o">:</span> <span class="kr">float</span><span class="p">;</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">width</span> <span class="o">:</span> <span class="kr">short</span><span class="p">;</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">height</span> <span class="o">:</span> <span class="kr">short</span><span class="p">;</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">depth</span> <span class="o">:</span> <span class="kr">short</span><span class="p">;</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">origin</span> <span class="o">:</span> <span class="nx">Vector3</span><span class="p">;</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">cubeSet</span> <span class="o">:</span> <span class="kr">boolean</span><span class="p">[,,];</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">cubeNormalSum</span> <span class="o">:</span> <span class="kr">short</span><span class="p">[,,];</span>
</span><span class='line'><span class="kr">private</span> <span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">AABC stands for Axis Aligned Bounding Cube.</span>
</span><span class='line'><span class="cm">For performance purpose, I didn&#39;t add a 3 dimension array of AABCs, otherwise each cube had to store the side length, the set value etc...</span>
</span><span class='line'><span class="cm">However an AABC class is defined, but only for external use, while inside the AABCGrid class everything is evaluated starting from the class properties.</span>
</span><span class='line'><span class="cm">e.g. to obtain the vertices of a cube is it possible to use the method</span>
</span><span class='line'><span class="cm">AABCGrid.GetAABCCorners(x : short, y : short, z : short) : Vector3[]</span>
</span><span class='line'><span class="cm">or the method AABC.GetCorners().</span>
</span><span class='line'><span class="cm">The AABC.GetCorners() is actually defined like this:</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kr">public</span> <span class="kd">function</span> <span class="nx">GetCorners</span><span class="p">(</span><span class="nx">x</span> <span class="o">:</span> <span class="kr">short</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:</span> <span class="kr">short</span><span class="p">,</span> <span class="nx">z</span> <span class="o">:</span> <span class="kr">short</span><span class="p">)</span> <span class="o">:</span> <span class="nx">Vector3</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// grid is a reference to an AABCGrid</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">grid</span><span class="p">.</span><span class="nx">GetAABCCorners</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the public method call a CheckBound() function that check if the cube specified by the x, y, z variable is inside the grid, then the real implementation of the method is called.
e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">public</span> <span class="kd">function</span> <span class="nx">IsAABCSet</span><span class="p">(</span><span class="nx">x</span> <span class="o">:</span> <span class="kr">short</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:</span> <span class="kr">short</span><span class="p">,</span> <span class="nx">z</span> <span class="o">:</span> <span class="kr">short</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">CheckBounds</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">IsAABCSetUnchecked</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">protected</span> <span class="kd">function</span> <span class="nx">IsAABCSetUnchecked</span><span class="p">(</span><span class="nx">x</span> <span class="o">:</span> <span class="kr">short</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:</span> <span class="kr">short</span><span class="p">,</span> <span class="nx">z</span> <span class="o">:</span> <span class="kr">short</span><span class="p">)</span> <span class="o">:</span> <span class="kr">boolean</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">cubeSet</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Off course, inside the AABCGrid class and in the possible inheritors, only the unchecked method should be called for faster code.</p>

<h2>Creating the voxel shell</h2>

<p>Once the grid is defined, we need to &lsquo;set&rsquo; all the cubes that are intersected by a triangle of the mesh.
This is done in the <strong>AABCGrid.FillGridWithGameObjectMeshShell()</strong> method.</p>

<p>The result will be a voxel shell, an empty shape that reproduces the mesh.</p>

<p>Ignore the part relative to the normals of the triangles, I&rsquo;m going to explain that later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">public</span> <span class="kd">function</span> <span class="nx">FillGridWithGameObjectMeshShell</span><span class="p">(</span><span class="nx">gameObj</span> <span class="o">:</span> <span class="nx">GameObject</span><span class="p">,</span> <span class="nx">storeNormalSum</span> <span class="o">:</span> <span class="kr">boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">gameObjMesh</span> <span class="o">=</span> <span class="nx">gameObj</span><span class="p">.</span><span class="nx">GetComponent</span><span class="p">(</span><span class="nx">MeshFilter</span><span class="p">).</span><span class="nx">mesh</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">gameObjTransf</span> <span class="o">=</span> <span class="nx">gameObj</span><span class="p">.</span><span class="nx">transform</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">triangle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">Time</span><span class="p">.</span><span class="nx">realtimeSinceStartup</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">meshVertices</span> <span class="o">=</span> <span class="nx">gameObjMesh</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">meshTriangles</span> <span class="o">=</span> <span class="nx">gameObjMesh</span><span class="p">.</span><span class="nx">triangles</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">meshTrianglesCount</span> <span class="o">=</span> <span class="nx">meshTriangles</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">:</span> <span class="kr">short</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">:</span> <span class="kr">short</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">z</span> <span class="o">:</span> <span class="kr">short</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ignoreNormalRange</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// In this method we can also evaluate stores the normals of the triangles </span>
</span><span class='line'>    <span class="c1">// that intersect the cube.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">storeNormalSum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">cubeNormalSum</span> <span class="o">=</span> <span class="k">new</span> <span class="kr">short</span> <span class="p">[</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">depth</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Start:&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Time: &quot;</span> <span class="o">+</span> <span class="nx">startTime</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;     Mesh Description: &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Name: &quot;</span> <span class="o">+</span> <span class="nx">gameObjMesh</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Triangles: &quot;</span> <span class="o">+</span> <span class="nx">meshTrianglesCount</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Local AABB size: &quot;</span> <span class="o">+</span> <span class="nx">gameObjMesh</span><span class="p">.</span><span class="nx">bounds</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;     AABCGrid Description:&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Size: &quot;</span> <span class="o">+</span> <span class="nx">width</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span> <span class="nx">height</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span> <span class="nx">depth</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// For each triangle, perform SAT intersection check with the AABCs within the triangle AABB.</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">meshTrianglesCount</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">gameObjTransf</span><span class="p">.</span><span class="nx">TransformPoint</span><span class="p">(</span><span class="nx">meshVertices</span><span class="p">[</span><span class="nx">meshTriangles</span><span class="p">[</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">3</span><span class="p">]]);</span>
</span><span class='line'>        <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">gameObjTransf</span><span class="p">.</span><span class="nx">TransformPoint</span><span class="p">(</span><span class="nx">meshVertices</span><span class="p">[</span><span class="nx">meshTriangles</span><span class="p">[</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]);</span>
</span><span class='line'>        <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">gameObjTransf</span><span class="p">.</span><span class="nx">TransformPoint</span><span class="p">(</span><span class="nx">meshVertices</span><span class="p">[</span><span class="nx">meshTriangles</span><span class="p">[</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]]);</span>
</span><span class='line'>        <span class="c1">// Find the triangle AABB, select a sub grid.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">startX</span> <span class="o">=</span> <span class="nx">Mathf</span><span class="p">.</span><span class="nx">Floor</span><span class="p">((</span><span class="nx">Mathf</span><span class="p">.</span><span class="nx">Min</span><span class="p">([</span><span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">x</span><span class="p">])</span> <span class="o">-</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">/</span> <span class="nx">side</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">startY</span> <span class="o">=</span> <span class="nx">Mathf</span><span class="p">.</span><span class="nx">Floor</span><span class="p">((</span><span class="nx">Mathf</span><span class="p">.</span><span class="nx">Min</span><span class="p">([</span><span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">y</span><span class="p">])</span> <span class="o">-</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="o">/</span> <span class="nx">side</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">startZ</span> <span class="o">=</span> <span class="nx">Mathf</span><span class="p">.</span><span class="nx">Floor</span><span class="p">((</span><span class="nx">Mathf</span><span class="p">.</span><span class="nx">Min</span><span class="p">([</span><span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">z</span><span class="p">])</span> <span class="o">-</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span> <span class="o">/</span> <span class="nx">side</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">endX</span> <span class="o">=</span> <span class="nx">Mathf</span><span class="p">.</span><span class="nx">Ceil</span><span class="p">((</span><span class="nx">Mathf</span><span class="p">.</span><span class="nx">Max</span><span class="p">([</span><span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">x</span><span class="p">])</span> <span class="o">-</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">/</span> <span class="nx">side</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">endY</span> <span class="o">=</span> <span class="nx">Mathf</span><span class="p">.</span><span class="nx">Ceil</span><span class="p">((</span><span class="nx">Mathf</span><span class="p">.</span><span class="nx">Max</span><span class="p">([</span><span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">y</span><span class="p">])</span> <span class="o">-</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="o">/</span> <span class="nx">side</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">endZ</span> <span class="o">=</span> <span class="nx">Mathf</span><span class="p">.</span><span class="nx">Ceil</span><span class="p">((</span><span class="nx">Mathf</span><span class="p">.</span><span class="nx">Max</span><span class="p">([</span><span class="nx">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span> <span class="nx">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">z</span><span class="p">])</span> <span class="o">-</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span> <span class="o">/</span> <span class="nx">side</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">storeNormalSum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">startX</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">endX</span><span class="p">;</span> <span class="o">++</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">startY</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">endY</span><span class="p">;</span> <span class="o">++</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">z</span> <span class="o">=</span> <span class="nx">startZ</span><span class="p">;</span> <span class="nx">z</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">endZ</span><span class="p">;</span> <span class="o">++</span><span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">TriangleIntersectAABC</span><span class="p">(</span><span class="nx">triangle</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                            <span class="kd">var</span> <span class="nx">triangleNormal</span> <span class="o">=</span> <span class="nx">GetTriangleNormal</span><span class="p">(</span><span class="nx">triangle</span><span class="p">);</span>
</span><span class='line'>                            <span class="nx">cubeSet</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="nx">triangleNormal</span><span class="p">.</span><span class="nx">z</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">-</span> <span class="nx">ignoreNormalRange</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">cubeNormalSum</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">triangleNormal</span><span class="p">.</span><span class="nx">z</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">+</span> <span class="nx">ignoreNormalRange</span><span class="p">){</span>
</span><span class='line'>                                <span class="nx">cubeNormalSum</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">startX</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">endX</span><span class="p">;</span> <span class="o">++</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">startY</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">endY</span><span class="p">;</span> <span class="o">++</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">z</span> <span class="o">=</span> <span class="nx">startZ</span><span class="p">;</span> <span class="nx">z</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">endZ</span><span class="p">;</span> <span class="o">++</span><span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">IsAABCSet</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">TriangleIntersectAABC</span><span class="p">(</span><span class="nx">triangle</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">cubeSet</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Grid Evaluation Ended!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;Time spent: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">Time</span><span class="p">.</span><span class="nx">realtimeSinceStartup</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;s&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Debug</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s2">&quot;End: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code finds the AABB of each triangle (2), then performs the SAT intersection test on each cube intersected by AABB (3).</p>

<p><a href="http://1.bp.blogspot.com/-_DEozMxL7Ms/UD4N_qys_MI/AAAAAAAAAIc/O8VbBzba8Cg/s1600/satGridTest.png">triangles</a>
(1) the triangle in the grid.&nbsp; (2) the triangle with its AABB and the AABCs intersected by the AABB. (3) the AABCs intersected by the triangle</p>

<h2>Filling the hollow inside</h2>

<p><strong>When this method is finished</strong> we will have a voxel model that reproduce the mesh. But we have not finished yet, we may need also to know which voxel (AABC) is inside the mesh and which is out.
In order to do that we use the scan fill algorithm like the post on overgrowth blog explains, except for a little thing: we don&rsquo;t start to fill the cube when the normal of the last triangle faces to the left, instead we mark &lsquo;Begin&rsquo; and &lsquo;End&rsquo; cubes in FillGridWithGameObjectMeshShell().
If the z component of the triangle is positive, we decrease cubeNormalSum[x, y, z] by one, else we increase it. When all the triangles have been processed, a&nbsp; positive cubeNormalSum means that the cube is a &lsquo;Begin&rsquo; cube, if it is negative then the cube is an &lsquo;End&rsquo; cube.</p>

<p>We can&rsquo;t just check the normal of the last triangle because we don&rsquo;t know the order of the triangles, we neither traverse the entire grid during the creation of the voxel shell.</p>

<p>The method FillGridWithGameObjectMesh() does the real scan lining once that FillGridWithGameObjectMeshShell() ends. It traverses all the grid, starting from the cube at 0, 0, 0.
If a &lsquo;Begin&rsquo; cube is found, an &lsquo;End&rsquo; cube is searched. If an &lsquo;End&rsquo; cube is found, all the cubes between the last &lsquo;Begin&rsquo; and &lsquo;End&rsquo; are set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">public</span> <span class="kd">function</span> <span class="nx">FillGridWithGameObjectMesh</span><span class="p">(</span><span class="nx">gameObj</span> <span class="o">:</span> <span class="nx">GameObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">FillGridWithGameObjectMeshShell</span><span class="p">(</span><span class="nx">gameObj</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">width</span><span class="p">;</span> <span class="o">++</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">height</span><span class="p">;</span> <span class="o">++</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">fill</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">cubeToFill</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>         <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">z</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">depth</span><span class="p">;</span> <span class="o">++</span><span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">cubeSet</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">normalSum</span> <span class="o">=</span> <span class="nx">cubeNormalSum</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">];</span>
</span><span class='line'>               <span class="k">if</span> <span class="p">(</span><span class="nx">normalSum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="nx">normalSum</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                     <span class="c1">// &#39;Begin&#39; cube</span>
</span><span class='line'>                     <span class="nx">fill</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                     <span class="c1">// &#39;End&#39; cube</span>
</span><span class='line'>                     <span class="nx">fill</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                     <span class="k">while</span> <span class="p">(</span><span class="nx">cubeToFill</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">cubeToFill</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">cubeSet</span><span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span> <span class="o">-</span> <span class="nx">cubeToFill</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                     <span class="p">}</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>               <span class="nx">cubeToFill</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>             <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="nx">fill</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">cubeToFill</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="nx">cubeNormalSum</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Performance</h2>

<p><strong>Performance are mainly determined</strong> by the number of triangles in the mesh and the side length of the AABCs.
Here they are some of the tests made on my laptop:</p>

<p><strong>Laptop specs:</strong>
HP g6-1359el
Intel Core i5-2450M - 2,5 GHz
AMD Radeon HD 7450M</p>

<h3>First Test</h3>

<p><img src="http://2.bp.blogspot.com/-8H-XtYVenzU/UD46JcOx8EI/AAAAAAAAAI0/YVsH2Zvv7uQ/s1600/test1.png" alt="first" /></p>

<p>Mesh: construction_worke
Time spent: 0.4051636s
Triangles: 4020
Cube side: 0.05</p>

<h3>Second Test</h3>

<p><img src="http://1.bp.blogspot.com/-8U6OSER1xMw/UD46n8wx7VI/AAAAAAAAAI8/-j_jVcP9WSQ/s1600/test2.png" alt="second" /></p>

<p>Mesh: construction_worker
Time spent: 1.088864s
Triangles: 4020
Cube side: 0.02</p>

<h3>Third Test</h3>

<p><img src="http://3.bp.blogspot.com/-qZirZ87RDdA/UD48XZRB5CI/AAAAAAAAAJE/DRmg_Cwpt1U/s1600/test3.png" alt="third" /></p>

<p>Mesh: sphere</p>

<p>Time spent: 1.926165s
Triangles:760
Cube side: 0.03</p>

<p>Memory could be saved storing <strong>cubeSet</strong> using a 3D bitarray class and <strong>cubeNormalSum</strong> using a 3D array of bytes</p>

<h2>Try it yourself</h2>

<p>For testing purpose there is also a VoxelizationTest.js script on my github. Attach it to an object with a mesh to try this voxelization script. Remember to enable Gizmos in the game window, otherwise the AABCs will not appear!</p>
]]></content>
    
  </entry>
  
</feed>